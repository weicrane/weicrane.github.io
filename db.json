{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/ocean/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/ocean/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/ocean/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/GitHub-Mark-32px.png","path":"images/GitHub-Mark-32px.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/GitHub-Mark-64px.png","path":"images/GitHub-Mark-64px.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/GitHub-Mark-Light-32px.png","path":"images/GitHub-Mark-Light-32px.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/github-logo.svg","path":"images/github-logo.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/GitHub-Mark-Light-64px.png","path":"images/GitHub-Mark-Light-64px.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo-inverted.svg","path":"images/hexo-inverted.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/hexo.svg","path":"images/hexo.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","path":"js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/ocean.js","path":"js/ocean.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/viewer.min.js","path":"js/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","path":"css/feathericon/feathericon.eot","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","path":"css/feathericon/feathericon.ttf","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","path":"css/feathericon/feathericon.woff","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","path":"css/feathericon/feathericon.woff2","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","path":"images/ocean/overlay-hero.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","path":"css/feathericon/feathericon.svg","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/forrestgump.png","path":"images/forrestgump.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/GitHub-Mark.zip","path":"images/GitHub-Mark.zip","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","path":"images/ocean/ocean.ogv","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.png","path":"images/ocean/ocean.png","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.webm","path":"images/ocean/ocean.webm","modified":1,"renderable":1},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","path":"images/ocean/ocean.mp4","modified":1,"renderable":1}],"Cache":[{"_id":"themes/ocean/README.md","hash":"e9075d3d90e7cec53fbc86b22a3505346e8578ce","modified":1578788542000},{"_id":"themes/ocean/_config.yml","hash":"b6f2ef178c42ddab728d904b54e15a407e50f806","modified":1582288628796},{"_id":"themes/ocean/package.json","hash":"b993176f8c35bc3ab9dbd8642ec6cd125fcb447e","modified":1578788542000},{"_id":"source/_posts/Hexo博客搭建总结.md","hash":"c3b7971f58c58d760b3e3376298b6f7eef5adbbd","modified":1581045848448},{"_id":"source/_posts/不在学校如何使用Zotero和知网.md","hash":"ec655dace3f0341ea9e8172b763bc73b78971e93","modified":1588954684388},{"_id":"source/_posts/前端基础（一）.md","hash":"e0def5d62ba3c213e2085685f4fc2ceecb664a6d","modified":1582823350220},{"_id":"source/_posts/用HTML5和原生JS写一个进度条.md","hash":"d55914810e9a46213f2ef1903202a7adbcb54854","modified":1597328468346},{"_id":"source/_posts/给hexo博文页面加入图片查看器.md","hash":"92aaa90c7f245f1e9162f4f22ee0c0dc5cfe6a0e","modified":1582823750164},{"_id":"source/about/index.md","hash":"e7454151d87132ffeed79ec402e01b422652f588","modified":1581047352326},{"_id":"source/categories/index.md","hash":"a2b84d11f4a293a97f2ca3ef5c199ef1a850feb0","modified":1581047366057},{"_id":"themes/ocean/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1578788542000},{"_id":"themes/ocean/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1578788542000},{"_id":"themes/ocean/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1578788542000},{"_id":"themes/ocean/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1578788542000},{"_id":"themes/ocean/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1578788542000},{"_id":"themes/ocean/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1578788542000},{"_id":"themes/ocean/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1578788542000},{"_id":"themes/ocean/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1578788542000},{"_id":"themes/ocean/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1578788542000},{"_id":"themes/ocean/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1578788542000},{"_id":"themes/ocean/languages/zh-CN.yml","hash":"0d2244f95623305744eb40dcec7ace32a0223461","modified":1578788542000},{"_id":"themes/ocean/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1578788542000},{"_id":"themes/ocean/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1578788542000},{"_id":"themes/ocean/layout/categories.ejs","hash":"5c341e56c38f30e610ab25c9026b4a21fe1127c8","modified":1578788542000},{"_id":"themes/ocean/layout/index.ejs","hash":"f8dbff295abb2a87bec1fb5f5feec2e408743693","modified":1578788542000},{"_id":"themes/ocean/layout/layout.ejs","hash":"a35490e7b61e924728c71c9aa4dfeaff421ba442","modified":1578788542000},{"_id":"themes/ocean/layout/page.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1578788542000},{"_id":"themes/ocean/layout/post.ejs","hash":"a9a48ae63f5d68a36382951166fdd6e482b901f1","modified":1578788542000},{"_id":"themes/ocean/layout/tags.ejs","hash":"88b34dd8d7b1e64fa27aa6ed72af996cf6700809","modified":1578788542000},{"_id":"themes/ocean/source/404.html","hash":"788929fab7b99dd74575399f41cddae6f63ce1f4","modified":1578788542000},{"_id":"themes/ocean/source/favicon.ico","hash":"0f20298a6a4d1ebd7a7ae7b87d7a3ae9afec0623","modified":1578788542000},{"_id":"themes/ocean/source/robots.txt","hash":"0a017f05351c30d5fcff0206cf19e85fd5c6a6e9","modified":1578788542000},{"_id":"source/_posts/Hexo博客搭建总结/gitee权限报错.png","hash":"1b0d15119bf8a5a8ac38fb5024b608c3bf981336","modified":1580483017814},{"_id":"source/_posts/Hexo博客搭建总结/hexosync分支缺失的文件.png","hash":"2b24ea83b93239fa6e480c1c76060842617c29bf","modified":1580458267789},{"_id":"source/_posts/Hexo博客搭建总结/复制文件.png","hash":"4af9d69f07d08dd59e030ec91019e1287fd8c056","modified":1580477982988},{"_id":"source/_posts/Hexo博客搭建总结/管理凭据.png","hash":"78df87a8864bdaf0f0224048b8201da78c2ad936","modified":1580481081603},{"_id":"source/_posts/前端基础（一）/flex布局.svg","hash":"498eb6a6a2d0e44f23a2bca5af3ba73c4a59637a","modified":1582802739386},{"_id":"source/_posts/不在学校如何使用Zotero和知网/zotero代理设置.png","hash":"f2cbbaff7e767de78f2b1cb01c691d82dccd5e69","modified":1588909425656},{"_id":"source/_posts/不在学校如何使用Zotero和知网/代理设置.png","hash":"ce99bd5f611747e97e1f2c8cb78ef6dd2be78b4e","modified":1588954650380},{"_id":"themes/ocean/layout/_partial/after-footer.ejs","hash":"85c14ce312f58c9a95b2ad6520e4a40e3f0b6585","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/archive-post.ejs","hash":"9be7173badcca6582c1136204adb3aa432aada21","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/archive.ejs","hash":"fff2863c4b7af02a0b2fe332df91f639fc11036b","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/article.ejs","hash":"161f3693d05a3261858a1a7e7dbcd76f82a23251","modified":1582815683575},{"_id":"themes/ocean/layout/_partial/footer.ejs","hash":"da5d8c448881a83fab849f8f9aafb9af30105d1b","modified":1582815781165},{"_id":"themes/ocean/layout/_partial/head.ejs","hash":"b1024a42c66fa379003ea8b07f146c2514e1dac1","modified":1582814544641},{"_id":"themes/ocean/layout/_partial/ocean.ejs","hash":"fe5e5015ccee0c37a360cc751943292386b87dc9","modified":1582278305336},{"_id":"themes/ocean/layout/_partial/sidebar.ejs","hash":"fdc7de202ec17fca252bc9f39b955b1d782c8963","modified":1582290017299},{"_id":"themes/ocean/layout/_partial/totop.ejs","hash":"72b960315983ee95363fa9cabe82f52916ac9ae3","modified":1578788542000},{"_id":"themes/ocean/screenshots/hexo-theme-ocean.jpg","hash":"13b5045d2120cac2f68849757f5e0af08938b7c6","modified":1578788542000},{"_id":"themes/ocean/source/css/404.styl","hash":"14b2fec2da86081f0545732552aa5f07b545c19a","modified":1578788542000},{"_id":"themes/ocean/source/css/_feathericon.styl","hash":"8494f0e869411781264868f08eda62fd838e0cee","modified":1578788542000},{"_id":"themes/ocean/source/css/_extend.styl","hash":"deb6aca91c40516f5d638008a72f9def42e5d081","modified":1588952686378},{"_id":"themes/ocean/source/css/_mixins.styl","hash":"6959409df2dd0a1ca05be0c0e9b2a884efdfb82d","modified":1578788542000},{"_id":"themes/ocean/source/css/_normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1578788542000},{"_id":"themes/ocean/source/css/_variables.styl","hash":"68470eee12d812fcc51c1bd7a4578acae4613fa0","modified":1578788542000},{"_id":"themes/ocean/source/css/style.styl","hash":"b15d434deff447dc22601f325e66dee78a2d80f8","modified":1578788542000},{"_id":"themes/ocean/source/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":499162500000},{"_id":"themes/ocean/source/images/GitHub-Mark-32px.png","hash":"fabe53eb72f9b6d3d47cd95aff31ffc45c2fdbf8","modified":1366004970000},{"_id":"themes/ocean/source/images/GitHub-Mark-64px.png","hash":"b00f47d766170d5814e4a1270a3c534642923207","modified":1366005016000},{"_id":"themes/ocean/source/images/GitHub-Mark-Light-32px.png","hash":"b2a79b392657b559776ce122c89e42c42970595f","modified":1391577280000},{"_id":"themes/ocean/source/images/github-logo.svg","hash":"9f2604df2bf8ec1190947bba1cfacb70562f89b1","modified":1582277306161},{"_id":"themes/ocean/source/images/GitHub-Mark-Light-64px.png","hash":"a897bfa37a683b8d622fdf93f5535654350d83a1","modified":1391577264000},{"_id":"themes/ocean/source/images/hexo-inverted.svg","hash":"525309ea3c7360f83d1d9df6d04c256d7171950d","modified":1578788542000},{"_id":"themes/ocean/source/images/hexo.svg","hash":"71e7204d04ccfe260f06ea5873484791cd5f404a","modified":1578788542000},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.css","hash":"2e6a66987dbc7a57bbfd2655bce166739b4ba426","modified":1578788542000},{"_id":"themes/ocean/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1578788542000},{"_id":"themes/ocean/source/js/jquery.justifiedGallery.min.js","hash":"73b9373cd80bdbf77e711818095f3f120a019547","modified":1578788542000},{"_id":"themes/ocean/source/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1578788542000},{"_id":"themes/ocean/source/js/ocean.js","hash":"acac20176cf22a84f889894d7482dc9207076f12","modified":1578788542000},{"_id":"themes/ocean/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1578788542000},{"_id":"themes/ocean/source/js/search.js","hash":"3e66ea259eff66e36e240b695c4753c5d4454bbb","modified":1578788542000},{"_id":"themes/ocean/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1578788542000},{"_id":"themes/ocean/source/js/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":499162500000},{"_id":"source/_posts/Hexo博客搭建总结/giteepages服务.png","hash":"389ef20d72d099e929ad090e7adcca62ca7cc117","modified":1580480247897},{"_id":"source/_posts/给hexo博文页面加入图片查看器/原生Markdown生成的界面无法对图片操作.jpg","hash":"aff1db29d11b0ec79851610cc021a80cc405d149","modified":1582819897325},{"_id":"themes/ocean/source/fancybox/jquery.fancybox.min.js","hash":"600c86071c2b5198cfa2c052dd90b78920f62b45","modified":1578788542000},{"_id":"themes/ocean/source/js/jquery-2.0.3.min.js","hash":"ab131f0b13a89f24543fadbf496b1c813d417c02","modified":1578788542000},{"_id":"source/_posts/不在学校如何使用Zotero和知网/成功识别.png","hash":"99846927c2f06486b4920f29a9ff7032b93b90df","modified":1588910986124},{"_id":"themes/ocean/layout/_partial/post/albums.ejs","hash":"acb6d9628b7a2de4f32a84c6f652ac7207d14517","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/busuanzi.ejs","hash":"88462d160479cc3f0cc58efcd888fbaf22b0d4d8","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/category.ejs","hash":"85f0ebeceee1c32623bfa1e4170dbe1e34442fea","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/gallery.ejs","hash":"5f8487fe7bed9a09001c6655244ff35f583cf1eb","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/gitalk.ejs","hash":"e36d149ad83c3a52562dbef61a0083957eb24578","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/justifiedGallery.ejs","hash":"17ccb9fc394d11412619a153997bb87650799c6e","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/nav.ejs","hash":"6c7d36e8fab671d0133661f70cc4ed5a143e34e5","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/search.ejs","hash":"2c9d19d1685e834aa2020998da2a2d259ce9b9ff","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/title.ejs","hash":"53ccbfc6f1c424fb4dd609c1a61ffb69841403cc","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/tocbot.ejs","hash":"9898b0dd9237e21908ba40292a8a9f947bed44d2","modified":1578788542000},{"_id":"themes/ocean/layout/_partial/post/topping.ejs","hash":"bacd7e1d09397cfb32d97b5f3296f3ac538e57ea","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/albums.styl","hash":"0659d5f7469f24a415354ff767d949926465d515","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/apple.styl","hash":"e06dce604cc58ec39d677e4e59910c2725684901","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/article.styl","hash":"89be74d7c23366cad7ae1acf0db38bf0e7687a46","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/categories.styl","hash":"f0c898823a5ddc37ae6bf76cc34ce8e50dd30885","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/articles.styl","hash":"7bf289013d304505984b251be725b49165a694fd","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/archive.styl","hash":"8aefdcf2d542ad839018c2c58511e3318a38490d","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/footer.styl","hash":"24779cbce1012d4f35ffc6b3ec0830cbc2ea3b3f","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/gallery.styl","hash":"7bdc2c9fb4971dbd7511c5cbb69bd611f20db591","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/float.styl","hash":"d888df89a172e4c8119cb8740fc1eae1a9539157","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/highlight.styl","hash":"c6e99fd23056fb01177aeefbc5dd4a8e88cf8f81","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/gitalk.styl","hash":"3706eef2e0541493f1679a30241d279e29dfdc17","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/justifiedGallery.styl","hash":"e7b5784ffd501f98216a717f876f2adb23fa5cd9","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/layou.styl","hash":"445cccbdf3a01c340688f28124ac156b0b6d0214","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/lists.styl","hash":"6fd213c53027d42164bfc9f0e3b4ea02317bfb89","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/mobile.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/navbar.styl","hash":"829ebcd533eb77c4c4b8ce6df5e76dbcbe0b1f36","modified":1582290555345},{"_id":"themes/ocean/source/css/_partial/ocean.styl","hash":"69ba351909c73eb1e04510facc9b35dd584198e0","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/pace.styl","hash":"e326918ba276ee332d0598d8193ccd8353e7d916","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/search.styl","hash":"011aaf21942dfff514ed4e98ce20142efbdd1b71","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/sidebar.styl","hash":"600c70f1de82da5223af290d47a583f9c379d188","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/tag.styl","hash":"925af8beede44ab53fe3cd0a5c472d2baa03baec","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/totop.styl","hash":"4bae031b6852384666cdf36e98c6bbbba1281453","modified":1578788542000},{"_id":"themes/ocean/source/css/_partial/tocbot.styl","hash":"da8560a8f9718d3afb9760956f9f8e4bb88b3dd8","modified":1578788542000},{"_id":"themes/ocean/source/css/feathericon/feathericon.eot","hash":"e2a01ae6f849841bc7a9fd21e5b7b450f1ded19b","modified":1578788542000},{"_id":"themes/ocean/source/css/feathericon/feathericon.ttf","hash":"d0d80c3c960d7d45e6bd7fa428d8a6a8c8245b2d","modified":1578788542000},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff","hash":"d22fe861e47afd92969ab46c7cbb7ea9c225aaf8","modified":1578788542000},{"_id":"themes/ocean/source/css/feathericon/feathericon.woff2","hash":"2c11c45331d914ee38ad42ccf966132a508b5596","modified":1578788542000},{"_id":"themes/ocean/source/images/ocean/overlay-hero.png","hash":"92481a1848c35be96a693af11f77265323a7c189","modified":1578788542000},{"_id":"themes/ocean/source/css/feathericon/feathericon.svg","hash":"c113006c6822451802c8457128c352c0e4934453","modified":1578788542000},{"_id":"themes/ocean/source/images/forrestgump.png","hash":"18ad6a8ba815878e36a0d5562136dc4fb8920c12","modified":1578788542000},{"_id":"source/_posts/给hexo博文页面加入图片查看器/移动端浏览器使用viewerjs图片查看器的效果.jpg","hash":"527890fe05efe636c10a0c0db07c2f35a17c6ae2","modified":1582817843644},{"_id":"themes/ocean/source/images/GitHub-Mark.zip","hash":"30fb5af617877e940a1ee325907f22ef34cf0d2a","modified":1582277406474},{"_id":"themes/ocean/source/images/ocean/ocean.ogv","hash":"9c6b5d6b0544472cee39f5eafac2d5cbba5fd86b","modified":1578788542000},{"_id":"source/_posts/Hexo博客搭建总结/gitee权限成功.jpg","hash":"c506012ff6f12cd9a5dfe9c1bd513bcb2928d3fe","modified":1580482245976},{"_id":"themes/ocean/source/images/ocean/ocean.png","hash":"8245d07f812625d19b48ad2d00f8191f2aa4d304","modified":1578788542000},{"_id":"themes/ocean/source/images/ocean/ocean.webm","hash":"65aa2b6483e0151611899e31571057334c60d9e4","modified":1578788542000},{"_id":"themes/ocean/source/images/ocean/ocean.mp4","hash":"1e89cac2d652005d9dafd3ecb4dd460a8ff6d6af","modified":1578788542000}],"Category":[{"name":"博客总结","_id":"ckdswwbfr000490tohrjb96x4"},{"name":"Tools","_id":"ckdswwbg1000990to4fmicfor"}],"Data":[],"Page":[{"title":"about","date":"2020-02-07T03:49:12.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-07 11:49:12\n---\n","updated":"2020-02-07T03:49:12.326Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckdswwbfn000190tofww41n82","content":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-02-07T03:49:26.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-02-07 11:49:26\n---\n","updated":"2020-02-07T03:49:26.057Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckdswwbfq000390to6zzfaj35","content":"<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hexo博客搭建总结","date":"2020-01-31T08:37:56.000Z","_content":"在使用Hexo博客过程中，遇到的主要的问题和解决方法，主要有：\n\n- 多设备编辑和同步\n- Git多账号管理\n- 多平台一键部署\n- Markdown写作插图\n<!--more-->\n# Hexo博客搭建总结\n去年9月份搭建了自己的第一个Hexo框架的博客，在使用过程中，遇到了台式机和笔记本两台设备怎样写博客的问题。根据网上的教程，为Git仓库新建了一个用来编辑的分支。由于对Hexo框架不太了解，文件结构被自己搞得有点乱。由于病毒疫情不能出门，这次假期稍显无聊，便想起来把博客文件结构整理一下，结果搞成了404，于是决定趁机重新部署。读了一遍[Hexo文档](https://hexo.io/zh-cn/docs/)之后，觉得以前遇到的问题都可以容易地解决了。\n总结一下主要的问题有：\n\n- [x] 多设备编辑和同步\n- [x] Git多账号管理\n- [x] 多平台一键部署\n- [x] Markdown写作插图\n\n## 1.Hexo博客多设备同步\n> hexo文档推荐的解决方案：建立两个分支，一个用于部署，一个用于同步博客文档。\n\n首次安装参考[Hexo文档](https://hexo.io/zh-cn/docs/)即可顺利进行。\n\n接下来的工作是为了多设备同步：\n\n**1.新建分支**\n\n在Github远程仓库新建分支（我命名为*hexosync*分支，并设为default），用于同步编辑博客所需的全部文件。\n\n**2.复制文件**\n\nclone *hexosync*分支到本地，把除.git之外的文件删除，将安装博客的文件（除.deploy_git。node_modules也不必复制，反正会重装）复制到当前hexosync分支的仓库内，如图：\n{% asset_img 复制文件.png %}\n\n**3.修改参数**\n\n根据自己情况，比如需要同时部署到GitPages和Gitee,修改.gitignore,_config.yml的部分配置参数。没这些需求就不改，也完全可以。\n\n> **注意：**_config.yml里面deploy参数，分支应为master。\n\n有一个小插曲，我遇到一个报错，是YAML的转义字符。要在单引号`''`内使用单引号`'`，比如`'Welcome to Wei's blog.'`，在YAML语法中需要写为`'Welcome to Wei''s blog.'`\n\n**4.更换设备后**\n\n更换设备后，将远程仓库`clone`到本地，执行`npm install hexo`、`npm install`、`npm install hexo-deployer-git`(安装部署插件)，就可以编辑、更新博客了。\n\n每次更新博文后，执行`git add .`、`git commit -m \"...\"`、`git push origin `提交网站相关的文件；执行`hexo g -d`生成网站并部署到GitHub上。\n参考[使用hexo，如果换了电脑怎么更新博客？ - CrazyMilk的回答 - 知乎](\nhttps://www.zhihu.com/question/21193762/answer/79109280)。\n\n\n## 2.Git多账号管理\n因为我有一个Github账号，一个实验室公用仓库的Gitee账号，一个Gitee个人用账号，共三个账号，在设置时容易引发冲突。\n\n参考[Git配置多个SSH-Key](https://gitee.com/help/articles/4229#article-Kheader0)，为每个账号创建了SSH-Key，并在 ~/.ssh 目录下新建一个config文件，添加如下内容:\n```\n# github\nHost github.com\nHostName ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/github_id_rsa\n# gitee\nHost gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/gitee_id_rsa\n# gitee\nHost wyh.gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/gitee_wyh_rsa\n ```\n 其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径，Host不能重复，但可以指向同一个HostName,因此给第二个gitee Host命其他名。\n\n ## 3.Hexo博客多平台一键部署\n 因为考虑到在国内，Gitee Pages要比Github Pages访问速度快得多，便将博客同步部署到Gitee一份。\n\n我实践了两种办法：\n\n**方法一、同步Github仓库到Gitee**\n\n首先，导入Github仓库到Gitee，码云和Github的导入和同步参见：[GitHub仓库快速导入Gitee及同步更新](https://gitee.com/help/articles/4284)。\n\n然后，每次部署完之后，同步一次就可以。\n  > 注意：Gitee Pages服务需要在仓库`服务`选项中手动开启，如果博客显示404，检查是否忘了开启。（比较坑的是，需要绑定手机号。）\n  > {% asset_img giteepages服务.png %} \n\n**方法二、`hexo d`一键部署到两个平台**\n\n 在博客的配置文件`_config.yml`中，添加：\n ```\n deploy:\n- type: git\n  repo: https://github.com/.../xxx.github.io.git\n  branch: master\n- type: git\n  repo: https://gitee.com/xxx/xxx.git\n  branch: master\n  ```\n  将repo改为自己的仓库地址。\n\n  运行```hexo d```命令后，将依次部署到Github Pages和Gitee Pages。\n\n\n由于Gitee仓库名称和自己的个性地址不一致，会导致一些资源404，具体解决方法见[码云Pages](https://gitee.com/help/articles/4136)。\n\n还有一个小插曲，部署时，Gitee提示权限错误：\n  {% asset_img gitee权限报错.png %} \n发现错误原因是之前保存了实验室Gitee账号的账号密码，在控制面板\\用户帐户\\凭据管理器将其删除即可。\n  {% asset_img Hexo博客搭建总结/管理凭据.png %}\n\n然后重新执行`hexo d`就可以成功部署两个平台了：\n{% asset_img gitee权限成功.jpg %}\n\n## 4.Markdown写作插图\n由于写博文的时候，需要插入图片，利用网上的图床总有这那的缺点，因为图片不多，干脆直接放到文章对应的资源文件夹里。文章资源文件夹可以在`_config.yml`中修改配置`post_asset_folder`为`true`：\n```\npost_asset_folder: true\n```\n在执行`$ hexo new post_name`命令后，会自动生成同名文件夹，~~将图片放在其中利用相对路径访问即可（参考[Hexo博客搭建之在文章中插入图片 - yanyinhong的个人博客](https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/)）~~。\n由于Hexo 3.0版本以后，使用相对路径的常规 markdown 语法`![](/example.jpg)`，图片将不会正常显示，因此采用官方推荐的标签插件`{% asset_img example.jpg This is an example image %}`，不过这样在写MarkDown的时候，无法实时预览，感觉有点值得吐槽。\n","source":"_posts/Hexo博客搭建总结.md","raw":"---\ntitle: Hexo博客搭建总结\ndate: 2020-01-31 16:37:56\ntags: \n- 博客\n- 总结\ncategories: \n- 博客总结\n---\n在使用Hexo博客过程中，遇到的主要的问题和解决方法，主要有：\n\n- 多设备编辑和同步\n- Git多账号管理\n- 多平台一键部署\n- Markdown写作插图\n<!--more-->\n# Hexo博客搭建总结\n去年9月份搭建了自己的第一个Hexo框架的博客，在使用过程中，遇到了台式机和笔记本两台设备怎样写博客的问题。根据网上的教程，为Git仓库新建了一个用来编辑的分支。由于对Hexo框架不太了解，文件结构被自己搞得有点乱。由于病毒疫情不能出门，这次假期稍显无聊，便想起来把博客文件结构整理一下，结果搞成了404，于是决定趁机重新部署。读了一遍[Hexo文档](https://hexo.io/zh-cn/docs/)之后，觉得以前遇到的问题都可以容易地解决了。\n总结一下主要的问题有：\n\n- [x] 多设备编辑和同步\n- [x] Git多账号管理\n- [x] 多平台一键部署\n- [x] Markdown写作插图\n\n## 1.Hexo博客多设备同步\n> hexo文档推荐的解决方案：建立两个分支，一个用于部署，一个用于同步博客文档。\n\n首次安装参考[Hexo文档](https://hexo.io/zh-cn/docs/)即可顺利进行。\n\n接下来的工作是为了多设备同步：\n\n**1.新建分支**\n\n在Github远程仓库新建分支（我命名为*hexosync*分支，并设为default），用于同步编辑博客所需的全部文件。\n\n**2.复制文件**\n\nclone *hexosync*分支到本地，把除.git之外的文件删除，将安装博客的文件（除.deploy_git。node_modules也不必复制，反正会重装）复制到当前hexosync分支的仓库内，如图：\n{% asset_img 复制文件.png %}\n\n**3.修改参数**\n\n根据自己情况，比如需要同时部署到GitPages和Gitee,修改.gitignore,_config.yml的部分配置参数。没这些需求就不改，也完全可以。\n\n> **注意：**_config.yml里面deploy参数，分支应为master。\n\n有一个小插曲，我遇到一个报错，是YAML的转义字符。要在单引号`''`内使用单引号`'`，比如`'Welcome to Wei's blog.'`，在YAML语法中需要写为`'Welcome to Wei''s blog.'`\n\n**4.更换设备后**\n\n更换设备后，将远程仓库`clone`到本地，执行`npm install hexo`、`npm install`、`npm install hexo-deployer-git`(安装部署插件)，就可以编辑、更新博客了。\n\n每次更新博文后，执行`git add .`、`git commit -m \"...\"`、`git push origin `提交网站相关的文件；执行`hexo g -d`生成网站并部署到GitHub上。\n参考[使用hexo，如果换了电脑怎么更新博客？ - CrazyMilk的回答 - 知乎](\nhttps://www.zhihu.com/question/21193762/answer/79109280)。\n\n\n## 2.Git多账号管理\n因为我有一个Github账号，一个实验室公用仓库的Gitee账号，一个Gitee个人用账号，共三个账号，在设置时容易引发冲突。\n\n参考[Git配置多个SSH-Key](https://gitee.com/help/articles/4229#article-Kheader0)，为每个账号创建了SSH-Key，并在 ~/.ssh 目录下新建一个config文件，添加如下内容:\n```\n# github\nHost github.com\nHostName ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/github_id_rsa\n# gitee\nHost gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/gitee_id_rsa\n# gitee\nHost wyh.gitee.com\nHostName gitee.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/gitee_wyh_rsa\n ```\n 其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径，Host不能重复，但可以指向同一个HostName,因此给第二个gitee Host命其他名。\n\n ## 3.Hexo博客多平台一键部署\n 因为考虑到在国内，Gitee Pages要比Github Pages访问速度快得多，便将博客同步部署到Gitee一份。\n\n我实践了两种办法：\n\n**方法一、同步Github仓库到Gitee**\n\n首先，导入Github仓库到Gitee，码云和Github的导入和同步参见：[GitHub仓库快速导入Gitee及同步更新](https://gitee.com/help/articles/4284)。\n\n然后，每次部署完之后，同步一次就可以。\n  > 注意：Gitee Pages服务需要在仓库`服务`选项中手动开启，如果博客显示404，检查是否忘了开启。（比较坑的是，需要绑定手机号。）\n  > {% asset_img giteepages服务.png %} \n\n**方法二、`hexo d`一键部署到两个平台**\n\n 在博客的配置文件`_config.yml`中，添加：\n ```\n deploy:\n- type: git\n  repo: https://github.com/.../xxx.github.io.git\n  branch: master\n- type: git\n  repo: https://gitee.com/xxx/xxx.git\n  branch: master\n  ```\n  将repo改为自己的仓库地址。\n\n  运行```hexo d```命令后，将依次部署到Github Pages和Gitee Pages。\n\n\n由于Gitee仓库名称和自己的个性地址不一致，会导致一些资源404，具体解决方法见[码云Pages](https://gitee.com/help/articles/4136)。\n\n还有一个小插曲，部署时，Gitee提示权限错误：\n  {% asset_img gitee权限报错.png %} \n发现错误原因是之前保存了实验室Gitee账号的账号密码，在控制面板\\用户帐户\\凭据管理器将其删除即可。\n  {% asset_img Hexo博客搭建总结/管理凭据.png %}\n\n然后重新执行`hexo d`就可以成功部署两个平台了：\n{% asset_img gitee权限成功.jpg %}\n\n## 4.Markdown写作插图\n由于写博文的时候，需要插入图片，利用网上的图床总有这那的缺点，因为图片不多，干脆直接放到文章对应的资源文件夹里。文章资源文件夹可以在`_config.yml`中修改配置`post_asset_folder`为`true`：\n```\npost_asset_folder: true\n```\n在执行`$ hexo new post_name`命令后，会自动生成同名文件夹，~~将图片放在其中利用相对路径访问即可（参考[Hexo博客搭建之在文章中插入图片 - yanyinhong的个人博客](https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/)）~~。\n由于Hexo 3.0版本以后，使用相对路径的常规 markdown 语法`![](/example.jpg)`，图片将不会正常显示，因此采用官方推荐的标签插件`{% asset_img example.jpg This is an example image %}`，不过这样在写MarkDown的时候，无法实时预览，感觉有点值得吐槽。\n","slug":"Hexo博客搭建总结","published":1,"updated":"2020-02-07T03:24:08.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdswwbfi000090to7izj2ko4","content":"<p>在使用Hexo博客过程中，遇到的主要的问题和解决方法，主要有：</p>\n<ul>\n<li><p>多设备编辑和同步</p>\n</li>\n<li><p>Git多账号管理</p>\n</li>\n<li><p>多平台一键部署</p>\n</li>\n<li><p>Markdown写作插图</p>\n<a id=\"more\"></a>\n<h1 id=\"Hexo博客搭建总结\"><a href=\"#Hexo博客搭建总结\" class=\"headerlink\" title=\"Hexo博客搭建总结\"></a>Hexo博客搭建总结</h1><p>去年9月份搭建了自己的第一个Hexo框架的博客，在使用过程中，遇到了台式机和笔记本两台设备怎样写博客的问题。根据网上的教程，为Git仓库新建了一个用来编辑的分支。由于对Hexo框架不太了解，文件结构被自己搞得有点乱。由于病毒疫情不能出门，这次假期稍显无聊，便想起来把博客文件结构整理一下，结果搞成了404，于是决定趁机重新部署。读了一遍<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>之后，觉得以前遇到的问题都可以容易地解决了。<br>总结一下主要的问题有：</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>多设备编辑和同步</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>Git多账号管理</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>多平台一键部署</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>Markdown写作插图</p>\n</li>\n</ul>\n<h2 id=\"1-Hexo博客多设备同步\"><a href=\"#1-Hexo博客多设备同步\" class=\"headerlink\" title=\"1.Hexo博客多设备同步\"></a>1.Hexo博客多设备同步</h2><blockquote>\n<p>hexo文档推荐的解决方案：建立两个分支，一个用于部署，一个用于同步博客文档。</p>\n</blockquote>\n<p>首次安装参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>即可顺利进行。</p>\n<p>接下来的工作是为了多设备同步：</p>\n<p><strong>1.新建分支</strong></p>\n<p>在Github远程仓库新建分支（我命名为<em>hexosync</em>分支，并设为default），用于同步编辑博客所需的全部文件。</p>\n<p><strong>2.复制文件</strong></p>\n<p>clone <em>hexosync</em>分支到本地，把除.git之外的文件删除，将安装博客的文件（除.deploy_git。node_modules也不必复制，反正会重装）复制到当前hexosync分支的仓库内，如图：</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6.png\" class=\"\">\n\n<p><strong>3.修改参数</strong></p>\n<p>根据自己情况，比如需要同时部署到GitPages和Gitee,修改.gitignore,_config.yml的部分配置参数。没这些需求就不改，也完全可以。</p>\n<blockquote>\n<p><strong>注意：</strong>_config.yml里面deploy参数，分支应为master。</p>\n</blockquote>\n<p>有一个小插曲，我遇到一个报错，是YAML的转义字符。要在单引号<code>&#39;&#39;</code>内使用单引号<code>&#39;</code>，比如<code>&#39;Welcome to Wei&#39;s blog.&#39;</code>，在YAML语法中需要写为<code>&#39;Welcome to Wei&#39;&#39;s blog.&#39;</code></p>\n<p><strong>4.更换设备后</strong></p>\n<p>更换设备后，将远程仓库<code>clone</code>到本地，执行<code>npm install hexo</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>(安装部署插件)，就可以编辑、更新博客了。</p>\n<p>每次更新博文后，执行<code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin</code>提交网站相关的文件；执行<code>hexo g -d</code>生成网站并部署到GitHub上。<br>参考<a href=\"https://www.zhihu.com/question/21193762/answer/79109280\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？ - CrazyMilk的回答 - 知乎</a>。</p>\n<h2 id=\"2-Git多账号管理\"><a href=\"#2-Git多账号管理\" class=\"headerlink\" title=\"2.Git多账号管理\"></a>2.Git多账号管理</h2><p>因为我有一个Github账号，一个实验室公用仓库的Gitee账号，一个Gitee个人用账号，共三个账号，在设置时容易引发冲突。</p>\n<p>参考<a href=\"https://gitee.com/help/articles/4229#article-Kheader0\" target=\"_blank\" rel=\"noopener\">Git配置多个SSH-Key</a>，为每个账号创建了SSH-Key，并在 ~/.ssh 目录下新建一个config文件，添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;github_id_rsa</span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host wyh.gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;gitee_wyh_rsa</span><br></pre></td></tr></table></figure>\n<p> 其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径，Host不能重复，但可以指向同一个HostName,因此给第二个gitee Host命其他名。</p>\n<h2 id=\"3-Hexo博客多平台一键部署\"><a href=\"#3-Hexo博客多平台一键部署\" class=\"headerlink\" title=\"3.Hexo博客多平台一键部署\"></a>3.Hexo博客多平台一键部署</h2><p> 因为考虑到在国内，Gitee Pages要比Github Pages访问速度快得多，便将博客同步部署到Gitee一份。</p>\n<p>我实践了两种办法：</p>\n<p><strong>方法一、同步Github仓库到Gitee</strong></p>\n<p>首先，导入Github仓库到Gitee，码云和Github的导入和同步参见：<a href=\"https://gitee.com/help/articles/4284\" target=\"_blank\" rel=\"noopener\">GitHub仓库快速导入Gitee及同步更新</a>。</p>\n<p>然后，每次部署完之后，同步一次就可以。</p>\n<blockquote>\n<p>注意：Gitee Pages服务需要在仓库<code>服务</code>选项中手动开启，如果博客显示404，检查是否忘了开启。（比较坑的是，需要绑定手机号。）</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/giteepages%E6%9C%8D%E5%8A%A1.png\" class=\"\"> \n</blockquote>\n<p><strong>方法二、<code>hexo d</code>一键部署到两个平台</strong></p>\n<p> 在博客的配置文件<code>_config.yml</code>中，添加：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;...&#x2F;xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;xxx&#x2F;xxx.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><br>  将repo改为自己的仓库地址。</p>\n<p>  运行<code>hexo d</code>命令后，将依次部署到Github Pages和Gitee Pages。</p>\n<p>由于Gitee仓库名称和自己的个性地址不一致，会导致一些资源404，具体解决方法见<a href=\"https://gitee.com/help/articles/4136\" target=\"_blank\" rel=\"noopener\">码云Pages</a>。</p>\n<p>还有一个小插曲，部署时，Gitee提示权限错误：<br>  <img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/gitee%E6%9D%83%E9%99%90%E6%8A%A5%E9%94%99.png\" class=\"\"><br>发现错误原因是之前保存了实验室Gitee账号的账号密码，在控制面板\\用户帐户\\凭据管理器将其删除即可。<br>  </p>\n<p>然后重新执行<code>hexo d</code>就可以成功部署两个平台了：</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/gitee%E6%9D%83%E9%99%90%E6%88%90%E5%8A%9F.jpg\" class=\"\">\n\n<h2 id=\"4-Markdown写作插图\"><a href=\"#4-Markdown写作插图\" class=\"headerlink\" title=\"4.Markdown写作插图\"></a>4.Markdown写作插图</h2><p>由于写博文的时候，需要插入图片，利用网上的图床总有这那的缺点，因为图片不多，干脆直接放到文章对应的资源文件夹里。文章资源文件夹可以在<code>_config.yml</code>中修改配置<code>post_asset_folder</code>为<code>true</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>在执行<code>$ hexo new post_name</code>命令后，会自动生成同名文件夹，<del>将图片放在其中利用相对路径访问即可（参考<a href=\"https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/\" target=\"_blank\" rel=\"noopener\">Hexo博客搭建之在文章中插入图片 - yanyinhong的个人博客</a>）</del>。<br>由于Hexo 3.0版本以后，使用相对路径的常规 markdown 语法<code>![](/example.jpg)</code>，图片将不会正常显示，因此采用官方推荐的标签插件<code></code>，不过这样在写MarkDown的时候，无法实时预览，感觉有点值得吐槽。</p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>在使用Hexo博客过程中，遇到的主要的问题和解决方法，主要有：</p>\n<ul>\n<li><p>多设备编辑和同步</p>\n</li>\n<li><p>Git多账号管理</p>\n</li>\n<li><p>多平台一键部署</p>\n</li>\n<li><p>Markdown写作插图</p>","more":"<h1 id=\"Hexo博客搭建总结\"><a href=\"#Hexo博客搭建总结\" class=\"headerlink\" title=\"Hexo博客搭建总结\"></a>Hexo博客搭建总结</h1><p>去年9月份搭建了自己的第一个Hexo框架的博客，在使用过程中，遇到了台式机和笔记本两台设备怎样写博客的问题。根据网上的教程，为Git仓库新建了一个用来编辑的分支。由于对Hexo框架不太了解，文件结构被自己搞得有点乱。由于病毒疫情不能出门，这次假期稍显无聊，便想起来把博客文件结构整理一下，结果搞成了404，于是决定趁机重新部署。读了一遍<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>之后，觉得以前遇到的问题都可以容易地解决了。<br>总结一下主要的问题有：</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>多设备编辑和同步</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>Git多账号管理</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>多平台一键部署</p>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>Markdown写作插图</p>\n</li>\n</ul>\n<h2 id=\"1-Hexo博客多设备同步\"><a href=\"#1-Hexo博客多设备同步\" class=\"headerlink\" title=\"1.Hexo博客多设备同步\"></a>1.Hexo博客多设备同步</h2><blockquote>\n<p>hexo文档推荐的解决方案：建立两个分支，一个用于部署，一个用于同步博客文档。</p>\n</blockquote>\n<p>首次安装参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>即可顺利进行。</p>\n<p>接下来的工作是为了多设备同步：</p>\n<p><strong>1.新建分支</strong></p>\n<p>在Github远程仓库新建分支（我命名为<em>hexosync</em>分支，并设为default），用于同步编辑博客所需的全部文件。</p>\n<p><strong>2.复制文件</strong></p>\n<p>clone <em>hexosync</em>分支到本地，把除.git之外的文件删除，将安装博客的文件（除.deploy_git。node_modules也不必复制，反正会重装）复制到当前hexosync分支的仓库内，如图：</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6.png\" class=\"\">\n\n<p><strong>3.修改参数</strong></p>\n<p>根据自己情况，比如需要同时部署到GitPages和Gitee,修改.gitignore,_config.yml的部分配置参数。没这些需求就不改，也完全可以。</p>\n<blockquote>\n<p><strong>注意：</strong>_config.yml里面deploy参数，分支应为master。</p>\n</blockquote>\n<p>有一个小插曲，我遇到一个报错，是YAML的转义字符。要在单引号<code>&#39;&#39;</code>内使用单引号<code>&#39;</code>，比如<code>&#39;Welcome to Wei&#39;s blog.&#39;</code>，在YAML语法中需要写为<code>&#39;Welcome to Wei&#39;&#39;s blog.&#39;</code></p>\n<p><strong>4.更换设备后</strong></p>\n<p>更换设备后，将远程仓库<code>clone</code>到本地，执行<code>npm install hexo</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>(安装部署插件)，就可以编辑、更新博客了。</p>\n<p>每次更新博文后，执行<code>git add .</code>、<code>git commit -m &quot;...&quot;</code>、<code>git push origin</code>提交网站相关的文件；执行<code>hexo g -d</code>生成网站并部署到GitHub上。<br>参考<a href=\"https://www.zhihu.com/question/21193762/answer/79109280\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？ - CrazyMilk的回答 - 知乎</a>。</p>\n<h2 id=\"2-Git多账号管理\"><a href=\"#2-Git多账号管理\" class=\"headerlink\" title=\"2.Git多账号管理\"></a>2.Git多账号管理</h2><p>因为我有一个Github账号，一个实验室公用仓库的Gitee账号，一个Gitee个人用账号，共三个账号，在设置时容易引发冲突。</p>\n<p>参考<a href=\"https://gitee.com/help/articles/4229#article-Kheader0\" target=\"_blank\" rel=\"noopener\">Git配置多个SSH-Key</a>，为每个账号创建了SSH-Key，并在 ~/.ssh 目录下新建一个config文件，添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># github</span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;github_id_rsa</span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;gitee_id_rsa</span><br><span class=\"line\"># gitee</span><br><span class=\"line\">Host wyh.gitee.com</span><br><span class=\"line\">HostName gitee.com</span><br><span class=\"line\">PreferredAuthentications publickey</span><br><span class=\"line\">IdentityFile ~&#x2F;.ssh&#x2F;gitee_wyh_rsa</span><br></pre></td></tr></table></figure>\n<p> 其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径，Host不能重复，但可以指向同一个HostName,因此给第二个gitee Host命其他名。</p>\n<h2 id=\"3-Hexo博客多平台一键部署\"><a href=\"#3-Hexo博客多平台一键部署\" class=\"headerlink\" title=\"3.Hexo博客多平台一键部署\"></a>3.Hexo博客多平台一键部署</h2><p> 因为考虑到在国内，Gitee Pages要比Github Pages访问速度快得多，便将博客同步部署到Gitee一份。</p>\n<p>我实践了两种办法：</p>\n<p><strong>方法一、同步Github仓库到Gitee</strong></p>\n<p>首先，导入Github仓库到Gitee，码云和Github的导入和同步参见：<a href=\"https://gitee.com/help/articles/4284\" target=\"_blank\" rel=\"noopener\">GitHub仓库快速导入Gitee及同步更新</a>。</p>\n<p>然后，每次部署完之后，同步一次就可以。</p>\n<blockquote>\n<p>注意：Gitee Pages服务需要在仓库<code>服务</code>选项中手动开启，如果博客显示404，检查是否忘了开启。（比较坑的是，需要绑定手机号。）</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/giteepages%E6%9C%8D%E5%8A%A1.png\" class=\"\"> \n</blockquote>\n<p><strong>方法二、<code>hexo d</code>一键部署到两个平台</strong></p>\n<p> 在博客的配置文件<code>_config.yml</code>中，添加：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> deploy:</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;...&#x2F;xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">- type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;gitee.com&#x2F;xxx&#x2F;xxx.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure><br>  将repo改为自己的仓库地址。</p>\n<p>  运行<code>hexo d</code>命令后，将依次部署到Github Pages和Gitee Pages。</p>\n<p>由于Gitee仓库名称和自己的个性地址不一致，会导致一些资源404，具体解决方法见<a href=\"https://gitee.com/help/articles/4136\" target=\"_blank\" rel=\"noopener\">码云Pages</a>。</p>\n<p>还有一个小插曲，部署时，Gitee提示权限错误：<br>  <img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/gitee%E6%9D%83%E9%99%90%E6%8A%A5%E9%94%99.png\" class=\"\"><br>发现错误原因是之前保存了实验室Gitee账号的账号密码，在控制面板\\用户帐户\\凭据管理器将其删除即可。<br>  </p>\n<p>然后重新执行<code>hexo d</code>就可以成功部署两个平台了：</p>\n<img src=\"/2020/01/31/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/gitee%E6%9D%83%E9%99%90%E6%88%90%E5%8A%9F.jpg\" class=\"\">\n\n<h2 id=\"4-Markdown写作插图\"><a href=\"#4-Markdown写作插图\" class=\"headerlink\" title=\"4.Markdown写作插图\"></a>4.Markdown写作插图</h2><p>由于写博文的时候，需要插入图片，利用网上的图床总有这那的缺点，因为图片不多，干脆直接放到文章对应的资源文件夹里。文章资源文件夹可以在<code>_config.yml</code>中修改配置<code>post_asset_folder</code>为<code>true</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>在执行<code>$ hexo new post_name</code>命令后，会自动生成同名文件夹，<del>将图片放在其中利用相对路径访问即可（参考<a href=\"https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/\" target=\"_blank\" rel=\"noopener\">Hexo博客搭建之在文章中插入图片 - yanyinhong的个人博客</a>）</del>。<br>由于Hexo 3.0版本以后，使用相对路径的常规 markdown 语法<code>![](/example.jpg)</code>，图片将不会正常显示，因此采用官方推荐的标签插件<code></code>，不过这样在写MarkDown的时候，无法实时预览，感觉有点值得吐槽。</p>"},{"title":"不在学校如何使用Zotero和知网","date":"2020-05-08T04:02:47.000Z","_content":"\n添加代理设置，让 Zotero 能够识别通过 VPN 访问的知网文献。\n\n<!-- more -->\n\n自从师兄那里得知[Zotero](https://www.zotero.org/) 这个开源的文献管理软件，便弃坑 EndNote。配合坚果云的免费存储空间，可以随时同步文献，非常方便。但是最近在家访问知网发现 Zotero Connector 插件无法识别文献，只能保存为网页。按照论坛提供的问题自查，发现完全正常。这个时候我意识到问题很可能出在 Zotero Connector 对 URL 的识别上。\n\n```\n// 正常访问知网，输入浏览器中的 URL 为\nhttps://www.cnki.net/\n// 通过学校 VPN 访问，URL 变为\nhttp://elib.cugb.edu.cn/https/77726476706e69737468656265737421e7e056d2243e635930068cb8/\n// 进入高级检索页面，URL 为\nhttp://elib.cugb.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kns/brief/result.aspx\n```\n\n于是猜测， Zotero Connector 无法识别代理后的链接导致了问题。[Zotero 知网 CNKI 网页识别](https://www.linxingzhong.top/posts/2019-11-5/)这篇博文证实并详细解释了原理。  \n那接下来需要解决的就是如何让 Zotero Connector 识别新的链接。好在其提供了 Proxies 设置。  \n{%asset_img article-image zotero代理设置.png Zotero Connector代理设置%}  \n对比代理前后访问知网的 URL，可以发现\n\n```\n// 主域名\nwww.cnki.net\n// 代理后的主域名\nelib.cugb.edu.cn/https/77726476706e69737468656265737421e7e056d2243e635930068cb8/\n```\n\n根据上图的规则，需要在 **Configured Proxies** 处添加代理配置，并且由于缺少指向知网的域名，需要添加 **Hostnames** 。\n{%asset_img article-image 代理设置.png 代理设置%}\n\n```\n// Configured Proxies添加\nelib.cugb.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/%p\n// Hostnames添加\nwww.cnki.net\n```\n\n刷新知网检索结果页面:\n{%asset_img article-image 成功识别.png 成功识别文献，黄色的提示关闭即可%}  \n已经可以识别出文献了,黄色的提示关闭即可。\n","source":"_posts/不在学校如何使用Zotero和知网.md","raw":"---\ntitle: 不在学校如何使用Zotero和知网\ndate: 2020-05-08 12:02:47\ntags: Zotero\ncategories: Tools\n---\n\n添加代理设置，让 Zotero 能够识别通过 VPN 访问的知网文献。\n\n<!-- more -->\n\n自从师兄那里得知[Zotero](https://www.zotero.org/) 这个开源的文献管理软件，便弃坑 EndNote。配合坚果云的免费存储空间，可以随时同步文献，非常方便。但是最近在家访问知网发现 Zotero Connector 插件无法识别文献，只能保存为网页。按照论坛提供的问题自查，发现完全正常。这个时候我意识到问题很可能出在 Zotero Connector 对 URL 的识别上。\n\n```\n// 正常访问知网，输入浏览器中的 URL 为\nhttps://www.cnki.net/\n// 通过学校 VPN 访问，URL 变为\nhttp://elib.cugb.edu.cn/https/77726476706e69737468656265737421e7e056d2243e635930068cb8/\n// 进入高级检索页面，URL 为\nhttp://elib.cugb.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/kns/brief/result.aspx\n```\n\n于是猜测， Zotero Connector 无法识别代理后的链接导致了问题。[Zotero 知网 CNKI 网页识别](https://www.linxingzhong.top/posts/2019-11-5/)这篇博文证实并详细解释了原理。  \n那接下来需要解决的就是如何让 Zotero Connector 识别新的链接。好在其提供了 Proxies 设置。  \n{%asset_img article-image zotero代理设置.png Zotero Connector代理设置%}  \n对比代理前后访问知网的 URL，可以发现\n\n```\n// 主域名\nwww.cnki.net\n// 代理后的主域名\nelib.cugb.edu.cn/https/77726476706e69737468656265737421e7e056d2243e635930068cb8/\n```\n\n根据上图的规则，需要在 **Configured Proxies** 处添加代理配置，并且由于缺少指向知网的域名，需要添加 **Hostnames** 。\n{%asset_img article-image 代理设置.png 代理设置%}\n\n```\n// Configured Proxies添加\nelib.cugb.edu.cn/https/77726476706e69737468656265737421fbf952d2243e635930068cb8/%p\n// Hostnames添加\nwww.cnki.net\n```\n\n刷新知网检索结果页面:\n{%asset_img article-image 成功识别.png 成功识别文献，黄色的提示关闭即可%}  \n已经可以识别出文献了,黄色的提示关闭即可。\n","slug":"不在学校如何使用Zotero和知网","published":1,"updated":"2020-05-08T16:18:04.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdswwbfp000290todchq3ebs","content":"<p>添加代理设置，让 Zotero 能够识别通过 VPN 访问的知网文献。</p>\n<a id=\"more\"></a>\n\n<p>自从师兄那里得知<a href=\"https://www.zotero.org/\" target=\"_blank\" rel=\"noopener\">Zotero</a> 这个开源的文献管理软件，便弃坑 EndNote。配合坚果云的免费存储空间，可以随时同步文献，非常方便。但是最近在家访问知网发现 Zotero Connector 插件无法识别文献，只能保存为网页。按照论坛提供的问题自查，发现完全正常。这个时候我意识到问题很可能出在 Zotero Connector 对 URL 的识别上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 正常访问知网，输入浏览器中的 URL 为</span><br><span class=\"line\">https:&#x2F;&#x2F;www.cnki.net&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; 通过学校 VPN 访问，URL 变为</span><br><span class=\"line\">http:&#x2F;&#x2F;elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421e7e056d2243e635930068cb8&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; 进入高级检索页面，URL 为</span><br><span class=\"line\">http:&#x2F;&#x2F;elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421fbf952d2243e635930068cb8&#x2F;kns&#x2F;brief&#x2F;result.aspx</span><br></pre></td></tr></table></figure>\n\n<p>于是猜测， Zotero Connector 无法识别代理后的链接导致了问题。<a href=\"https://www.linxingzhong.top/posts/2019-11-5/\" target=\"_blank\" rel=\"noopener\">Zotero 知网 CNKI 网页识别</a>这篇博文证实并详细解释了原理。<br>那接下来需要解决的就是如何让 Zotero Connector 识别新的链接。好在其提供了 Proxies 设置。  </p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/zotero%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png\" class=\"article-image\" title=\"Zotero Connector代理设置\">  \n<p>对比代理前后访问知网的 URL，可以发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 主域名</span><br><span class=\"line\">www.cnki.net</span><br><span class=\"line\">&#x2F;&#x2F; 代理后的主域名</span><br><span class=\"line\">elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421e7e056d2243e635930068cb8&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>根据上图的规则，需要在 <strong>Configured Proxies</strong> 处添加代理配置，并且由于缺少指向知网的域名，需要添加 <strong>Hostnames</strong> 。</p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png\" class=\"article-image\" title=\"代理设置\">\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Configured Proxies添加</span><br><span class=\"line\">elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421fbf952d2243e635930068cb8&#x2F;%p</span><br><span class=\"line\">&#x2F;&#x2F; Hostnames添加</span><br><span class=\"line\">www.cnki.net</span><br></pre></td></tr></table></figure>\n\n<p>刷新知网检索结果页面:</p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/%E6%88%90%E5%8A%9F%E8%AF%86%E5%88%AB.png\" class=\"article-image\" title=\"成功识别文献，黄色的提示关闭即可\">  \n<p>已经可以识别出文献了,黄色的提示关闭即可。</p>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>添加代理设置，让 Zotero 能够识别通过 VPN 访问的知网文献。</p>","more":"<p>自从师兄那里得知<a href=\"https://www.zotero.org/\" target=\"_blank\" rel=\"noopener\">Zotero</a> 这个开源的文献管理软件，便弃坑 EndNote。配合坚果云的免费存储空间，可以随时同步文献，非常方便。但是最近在家访问知网发现 Zotero Connector 插件无法识别文献，只能保存为网页。按照论坛提供的问题自查，发现完全正常。这个时候我意识到问题很可能出在 Zotero Connector 对 URL 的识别上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 正常访问知网，输入浏览器中的 URL 为</span><br><span class=\"line\">https:&#x2F;&#x2F;www.cnki.net&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; 通过学校 VPN 访问，URL 变为</span><br><span class=\"line\">http:&#x2F;&#x2F;elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421e7e056d2243e635930068cb8&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; 进入高级检索页面，URL 为</span><br><span class=\"line\">http:&#x2F;&#x2F;elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421fbf952d2243e635930068cb8&#x2F;kns&#x2F;brief&#x2F;result.aspx</span><br></pre></td></tr></table></figure>\n\n<p>于是猜测， Zotero Connector 无法识别代理后的链接导致了问题。<a href=\"https://www.linxingzhong.top/posts/2019-11-5/\" target=\"_blank\" rel=\"noopener\">Zotero 知网 CNKI 网页识别</a>这篇博文证实并详细解释了原理。<br>那接下来需要解决的就是如何让 Zotero Connector 识别新的链接。好在其提供了 Proxies 设置。  </p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/zotero%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png\" class=\"article-image\" title=\"Zotero Connector代理设置\">  \n<p>对比代理前后访问知网的 URL，可以发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 主域名</span><br><span class=\"line\">www.cnki.net</span><br><span class=\"line\">&#x2F;&#x2F; 代理后的主域名</span><br><span class=\"line\">elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421e7e056d2243e635930068cb8&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>根据上图的规则，需要在 <strong>Configured Proxies</strong> 处添加代理配置，并且由于缺少指向知网的域名，需要添加 <strong>Hostnames</strong> 。</p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE.png\" class=\"article-image\" title=\"代理设置\">\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Configured Proxies添加</span><br><span class=\"line\">elib.cugb.edu.cn&#x2F;https&#x2F;77726476706e69737468656265737421fbf952d2243e635930068cb8&#x2F;%p</span><br><span class=\"line\">&#x2F;&#x2F; Hostnames添加</span><br><span class=\"line\">www.cnki.net</span><br></pre></td></tr></table></figure>\n\n<p>刷新知网检索结果页面:</p>\n<img src=\"/2020/05/08/%E4%B8%8D%E5%9C%A8%E5%AD%A6%E6%A0%A1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Zotero%E5%92%8C%E7%9F%A5%E7%BD%91/%E6%88%90%E5%8A%9F%E8%AF%86%E5%88%AB.png\" class=\"article-image\" title=\"成功识别文献，黄色的提示关闭即可\">  \n<p>已经可以识别出文献了,黄色的提示关闭即可。</p>"},{"title":"前端基础（一）","date":"2020-02-26T09:49:39.000Z","_content":"最近在读一本掘金小册，[《从入门到深入：IM聊天系统前端开发实践》](https://juejin.im/book/5c47343bf265da612b13e5c0/section)，在阅读过程中简单整理了一些前端基础知识。\n主要有：\n- 浏览器解析原理\n- HTML/CSS基础知识\n  \n<!-- more -->\n# 浏览器的解析原理\n## 大致的解析原理\n>浏览器的解析过程：浏览器文档流 -> html DOM结构 --> CSS结合 --> 布局 --> 绘制页面。\n1. 第一步 HTML转换成DOM\n\n   > 服务端返回 `text/html` 格式的文档流， HTML 字符串描述了一个页面的结构，浏览器会把 HTML 字符串解析成 DOM 树形结构。\n\n2. 第二步 生成CSSOM结构\n\n   > CSS 样式可以在 WEB 页面里映射成 CSSOM（CSS对象模型），它和 DOM 结构比较像, 不是增量模式，而是组合模式。\n\n3. 第三步 CSSOM树和DOM树合并为渲染树\n4. 第四步 形成完整的DOM结构\n\n   > DOM 结构有两个规则：一个是 HTML 文档对象，一个是通过接口获取 DOM 元素。通过 `document.getElementById()` 以获取元素节点\n---\n## 性能优化策略\n了解了DOM树的构建顺序后，可以做一些简单的渲染优化。\n1. **JS优化**： `<script> `标签加上 **defer**属性 和 **async**属性， 不阻塞页面文档解析，控制脚本的下载和执行。\n   - **defer**属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。\n   - **async**属性： HTML5 新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。\n2. **Preload优化**： `preload`(预加载) 是一个声明式 fetch，可以强制浏览器在不阻塞 document 的 onload 事件的情况下请求资源。\n   > preload 有如下配置属性，`<link> `为标签, `ref=\"preload\" `为预加载属性配置，`href=\"/test.css\" `为加载的资源，`as=\"style\"` 为加载的资源类型。具体见MDN文档[通过rel=\"preload\"进行内容预加载](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content)\n   \n   >我在这个博客的Ocean主题里加了preload优化，等这篇推送到GitHub Pages以后看看实际效果如何。\n\n\n# HTML/CSS基础\n\n## 1.flex布局\n把主要内容做了个思维导图：\n{% asset_img article-image flex布局.svg flex布局 %}\n\n## 2.几个常见问题\n1. HTML需要将内容原样输出，哪个标签可以用于原样输出？\n   > `<pre></pre>`\n2. 什么是Link标签，能否用于定义RSS？\n   >`<link>`是HTML标签，定义文档与外部资源的关系，可以加载 CSS 文件，定义 RSS、rel 连接属性等。`@import`是 CSS 提供的语法规则，只有导入样式表的作用。\n   >\n   >`link` 元素是空元素，它仅包含属性,只能存在于` head `部分，不过它可出现任何次数。\n\n3. 哪一个标签可以打开系统上的邮箱客户端？\n>   ```html\n>    <p>\n>    这是一个电子邮件链接：\n>    <a href=\"mailto:someone@example.> com?Subject=Hello%20again\" target=\"_top\">\n>    发送邮件</a>\n>    </p>\n> <!--单词之间的空格需要使用%20来表示，以确保浏览器能真正解析空格。 -->\n>    ```\n","source":"_posts/前端基础（一）.md","raw":"---\ntitle: 前端基础（一）\ndate: 2020-02-26 17:49:39\ntags:\n- 前端\ncategories:\n---\n最近在读一本掘金小册，[《从入门到深入：IM聊天系统前端开发实践》](https://juejin.im/book/5c47343bf265da612b13e5c0/section)，在阅读过程中简单整理了一些前端基础知识。\n主要有：\n- 浏览器解析原理\n- HTML/CSS基础知识\n  \n<!-- more -->\n# 浏览器的解析原理\n## 大致的解析原理\n>浏览器的解析过程：浏览器文档流 -> html DOM结构 --> CSS结合 --> 布局 --> 绘制页面。\n1. 第一步 HTML转换成DOM\n\n   > 服务端返回 `text/html` 格式的文档流， HTML 字符串描述了一个页面的结构，浏览器会把 HTML 字符串解析成 DOM 树形结构。\n\n2. 第二步 生成CSSOM结构\n\n   > CSS 样式可以在 WEB 页面里映射成 CSSOM（CSS对象模型），它和 DOM 结构比较像, 不是增量模式，而是组合模式。\n\n3. 第三步 CSSOM树和DOM树合并为渲染树\n4. 第四步 形成完整的DOM结构\n\n   > DOM 结构有两个规则：一个是 HTML 文档对象，一个是通过接口获取 DOM 元素。通过 `document.getElementById()` 以获取元素节点\n---\n## 性能优化策略\n了解了DOM树的构建顺序后，可以做一些简单的渲染优化。\n1. **JS优化**： `<script> `标签加上 **defer**属性 和 **async**属性， 不阻塞页面文档解析，控制脚本的下载和执行。\n   - **defer**属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。\n   - **async**属性： HTML5 新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。\n2. **Preload优化**： `preload`(预加载) 是一个声明式 fetch，可以强制浏览器在不阻塞 document 的 onload 事件的情况下请求资源。\n   > preload 有如下配置属性，`<link> `为标签, `ref=\"preload\" `为预加载属性配置，`href=\"/test.css\" `为加载的资源，`as=\"style\"` 为加载的资源类型。具体见MDN文档[通过rel=\"preload\"进行内容预加载](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content)\n   \n   >我在这个博客的Ocean主题里加了preload优化，等这篇推送到GitHub Pages以后看看实际效果如何。\n\n\n# HTML/CSS基础\n\n## 1.flex布局\n把主要内容做了个思维导图：\n{% asset_img article-image flex布局.svg flex布局 %}\n\n## 2.几个常见问题\n1. HTML需要将内容原样输出，哪个标签可以用于原样输出？\n   > `<pre></pre>`\n2. 什么是Link标签，能否用于定义RSS？\n   >`<link>`是HTML标签，定义文档与外部资源的关系，可以加载 CSS 文件，定义 RSS、rel 连接属性等。`@import`是 CSS 提供的语法规则，只有导入样式表的作用。\n   >\n   >`link` 元素是空元素，它仅包含属性,只能存在于` head `部分，不过它可出现任何次数。\n\n3. 哪一个标签可以打开系统上的邮箱客户端？\n>   ```html\n>    <p>\n>    这是一个电子邮件链接：\n>    <a href=\"mailto:someone@example.> com?Subject=Hello%20again\" target=\"_top\">\n>    发送邮件</a>\n>    </p>\n> <!--单词之间的空格需要使用%20来表示，以确保浏览器能真正解析空格。 -->\n>    ```\n","slug":"前端基础（一）","published":1,"updated":"2020-02-27T17:09:10.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdswwbfy000690togbu60igi","content":"<p>最近在读一本掘金小册，<a href=\"https://juejin.im/book/5c47343bf265da612b13e5c0/section\" target=\"_blank\" rel=\"noopener\">《从入门到深入：IM聊天系统前端开发实践》</a>，在阅读过程中简单整理了一些前端基础知识。<br>主要有：</p>\n<ul>\n<li>浏览器解析原理</li>\n<li>HTML/CSS基础知识</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"浏览器的解析原理\"><a href=\"#浏览器的解析原理\" class=\"headerlink\" title=\"浏览器的解析原理\"></a>浏览器的解析原理</h1><h2 id=\"大致的解析原理\"><a href=\"#大致的解析原理\" class=\"headerlink\" title=\"大致的解析原理\"></a>大致的解析原理</h2><blockquote>\n<p>浏览器的解析过程：浏览器文档流 -&gt; html DOM结构 –&gt; CSS结合 –&gt; 布局 –&gt; 绘制页面。</p>\n</blockquote>\n<ol>\n<li><p>第一步 HTML转换成DOM</p>\n<blockquote>\n<p>服务端返回 <code>text/html</code> 格式的文档流， HTML 字符串描述了一个页面的结构，浏览器会把 HTML 字符串解析成 DOM 树形结构。</p>\n</blockquote>\n</li>\n<li><p>第二步 生成CSSOM结构</p>\n<blockquote>\n<p>CSS 样式可以在 WEB 页面里映射成 CSSOM（CSS对象模型），它和 DOM 结构比较像, 不是增量模式，而是组合模式。</p>\n</blockquote>\n</li>\n<li><p>第三步 CSSOM树和DOM树合并为渲染树</p>\n</li>\n<li><p>第四步 形成完整的DOM结构</p>\n<blockquote>\n<p>DOM 结构有两个规则：一个是 HTML 文档对象，一个是通过接口获取 DOM 元素。通过 <code>document.getElementById()</code> 以获取元素节点</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h2 id=\"性能优化策略\"><a href=\"#性能优化策略\" class=\"headerlink\" title=\"性能优化策略\"></a>性能优化策略</h2><p>了解了DOM树的构建顺序后，可以做一些简单的渲染优化。</p>\n<ol>\n<li><p><strong>JS优化</strong>： <code>&lt;script&gt;</code>标签加上 <strong>defer</strong>属性 和 <strong>async</strong>属性， 不阻塞页面文档解析，控制脚本的下载和执行。</p>\n<ul>\n<li><strong>defer</strong>属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。</li>\n<li><strong>async</strong>属性： HTML5 新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。</li>\n</ul>\n</li>\n<li><p><strong>Preload优化</strong>： <code>preload</code>(预加载) 是一个声明式 fetch，可以强制浏览器在不阻塞 document 的 onload 事件的情况下请求资源。</p>\n<blockquote>\n<p>preload 有如下配置属性，<code>&lt;link&gt;</code>为标签, <code>ref=&quot;preload&quot;</code>为预加载属性配置，<code>href=&quot;/test.css&quot;</code>为加载的资源，<code>as=&quot;style&quot;</code> 为加载的资源类型。具体见MDN文档<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\">通过rel=”preload”进行内容预加载</a></p>\n</blockquote>\n<blockquote>\n<p>我在这个博客的Ocean主题里加了preload优化，等这篇推送到GitHub Pages以后看看实际效果如何。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"HTML-CSS基础\"><a href=\"#HTML-CSS基础\" class=\"headerlink\" title=\"HTML/CSS基础\"></a>HTML/CSS基础</h1><h2 id=\"1-flex布局\"><a href=\"#1-flex布局\" class=\"headerlink\" title=\"1.flex布局\"></a>1.flex布局</h2><p>把主要内容做了个思维导图：</p>\n<img src=\"/2020/02/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/flex%E5%B8%83%E5%B1%80.svg\" class=\"article-image\" title=\"flex布局\">\n\n<h2 id=\"2-几个常见问题\"><a href=\"#2-几个常见问题\" class=\"headerlink\" title=\"2.几个常见问题\"></a>2.几个常见问题</h2><ol>\n<li><p>HTML需要将内容原样输出，哪个标签可以用于原样输出？</p>\n<blockquote>\n<p><code>&lt;pre&gt;&lt;/pre&gt;</code></p>\n</blockquote>\n</li>\n<li><p>什么是Link标签，能否用于定义RSS？</p>\n<blockquote>\n<p><code>&lt;link&gt;</code>是HTML标签，定义文档与外部资源的关系，可以加载 CSS 文件，定义 RSS、rel 连接属性等。<code>@import</code>是 CSS 提供的语法规则，只有导入样式表的作用。</p>\n<p><code>link</code> 元素是空元素，它仅包含属性,只能存在于<code>head</code>部分，不过它可出现任何次数。</p>\n</blockquote>\n</li>\n<li><p>哪一个标签可以打开系统上的邮箱客户端？</p>\n<blockquote>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">   这是一个电子邮件链接：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:someone@example.&gt; com?Subject=Hello%20again\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_top\"</span>&gt;</span></span><br><span class=\"line\">   发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--单词之间的空格需要使用%20来表示，以确保浏览器能真正解析空格。 --&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>最近在读一本掘金小册，<a href=\"https://juejin.im/book/5c47343bf265da612b13e5c0/section\" target=\"_blank\" rel=\"noopener\">《从入门到深入：IM聊天系统前端开发实践》</a>，在阅读过程中简单整理了一些前端基础知识。<br>主要有：</p>\n<ul>\n<li>浏览器解析原理</li>\n<li>HTML/CSS基础知识</li>\n</ul>","more":"<h1 id=\"浏览器的解析原理\"><a href=\"#浏览器的解析原理\" class=\"headerlink\" title=\"浏览器的解析原理\"></a>浏览器的解析原理</h1><h2 id=\"大致的解析原理\"><a href=\"#大致的解析原理\" class=\"headerlink\" title=\"大致的解析原理\"></a>大致的解析原理</h2><blockquote>\n<p>浏览器的解析过程：浏览器文档流 -&gt; html DOM结构 –&gt; CSS结合 –&gt; 布局 –&gt; 绘制页面。</p>\n</blockquote>\n<ol>\n<li><p>第一步 HTML转换成DOM</p>\n<blockquote>\n<p>服务端返回 <code>text/html</code> 格式的文档流， HTML 字符串描述了一个页面的结构，浏览器会把 HTML 字符串解析成 DOM 树形结构。</p>\n</blockquote>\n</li>\n<li><p>第二步 生成CSSOM结构</p>\n<blockquote>\n<p>CSS 样式可以在 WEB 页面里映射成 CSSOM（CSS对象模型），它和 DOM 结构比较像, 不是增量模式，而是组合模式。</p>\n</blockquote>\n</li>\n<li><p>第三步 CSSOM树和DOM树合并为渲染树</p>\n</li>\n<li><p>第四步 形成完整的DOM结构</p>\n<blockquote>\n<p>DOM 结构有两个规则：一个是 HTML 文档对象，一个是通过接口获取 DOM 元素。通过 <code>document.getElementById()</code> 以获取元素节点</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h2 id=\"性能优化策略\"><a href=\"#性能优化策略\" class=\"headerlink\" title=\"性能优化策略\"></a>性能优化策略</h2><p>了解了DOM树的构建顺序后，可以做一些简单的渲染优化。</p>\n<ol>\n<li><p><strong>JS优化</strong>： <code>&lt;script&gt;</code>标签加上 <strong>defer</strong>属性 和 <strong>async</strong>属性， 不阻塞页面文档解析，控制脚本的下载和执行。</p>\n<ul>\n<li><strong>defer</strong>属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。</li>\n<li><strong>async</strong>属性： HTML5 新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。</li>\n</ul>\n</li>\n<li><p><strong>Preload优化</strong>： <code>preload</code>(预加载) 是一个声明式 fetch，可以强制浏览器在不阻塞 document 的 onload 事件的情况下请求资源。</p>\n<blockquote>\n<p>preload 有如下配置属性，<code>&lt;link&gt;</code>为标签, <code>ref=&quot;preload&quot;</code>为预加载属性配置，<code>href=&quot;/test.css&quot;</code>为加载的资源，<code>as=&quot;style&quot;</code> 为加载的资源类型。具体见MDN文档<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content\" target=\"_blank\" rel=\"noopener\">通过rel=”preload”进行内容预加载</a></p>\n</blockquote>\n<blockquote>\n<p>我在这个博客的Ocean主题里加了preload优化，等这篇推送到GitHub Pages以后看看实际效果如何。</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"HTML-CSS基础\"><a href=\"#HTML-CSS基础\" class=\"headerlink\" title=\"HTML/CSS基础\"></a>HTML/CSS基础</h1><h2 id=\"1-flex布局\"><a href=\"#1-flex布局\" class=\"headerlink\" title=\"1.flex布局\"></a>1.flex布局</h2><p>把主要内容做了个思维导图：</p>\n<img src=\"/2020/02/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/flex%E5%B8%83%E5%B1%80.svg\" class=\"article-image\" title=\"flex布局\">\n\n<h2 id=\"2-几个常见问题\"><a href=\"#2-几个常见问题\" class=\"headerlink\" title=\"2.几个常见问题\"></a>2.几个常见问题</h2><ol>\n<li><p>HTML需要将内容原样输出，哪个标签可以用于原样输出？</p>\n<blockquote>\n<p><code>&lt;pre&gt;&lt;/pre&gt;</code></p>\n</blockquote>\n</li>\n<li><p>什么是Link标签，能否用于定义RSS？</p>\n<blockquote>\n<p><code>&lt;link&gt;</code>是HTML标签，定义文档与外部资源的关系，可以加载 CSS 文件，定义 RSS、rel 连接属性等。<code>@import</code>是 CSS 提供的语法规则，只有导入样式表的作用。</p>\n<p><code>link</code> 元素是空元素，它仅包含属性,只能存在于<code>head</code>部分，不过它可出现任何次数。</p>\n</blockquote>\n</li>\n<li><p>哪一个标签可以打开系统上的邮箱客户端？</p>\n<blockquote>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">   这是一个电子邮件链接：</span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:someone@example.&gt; com?Subject=Hello%20again\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_top\"</span>&gt;</span></span><br><span class=\"line\">   发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--单词之间的空格需要使用%20来表示，以确保浏览器能真正解析空格。 --&gt;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ol>"},{"title":"给hexo博文页面加入图片查看器","date":"2020-02-27T15:32:04.000Z","_content":"在hexo博客中，Markdown生成的界面无法对图片进行放大等操作，不便于阅读。通过引入viewerjs图片阅读器，可以实现点击图片进行放缩等功能。\n\n<!-- more -->\n今天在手机上看博客时，我发现博文中插入的脑图无法放大，根本看不清。使用电脑时可以直接放缩页面，但在因为适配了移动端，在手机上无法对页面放缩。\n如下图：\n{% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %}\n\n我在网上搜了一下解决办法，目前好像没有特别好用的插件，看到[为你的Hexo博客添加图片查看器](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)这篇博客，他使用了viewerjs插件，实现的功能正是我所需要的。于是晚上对自己使用的主题配置了一下，加入了viewerjs图片查看插件，点击页面上的图片，即可进行放缩等功能，见下图：\n{% asset_img article-image 移动端浏览器使用viewerjs图片查看器的效果.jpg 480 960 移动端浏览器使用viewerjs图片查看器的效果 %}\n\n## 1.安装viewerjs\n[viewerjs](https://github.com/fengyuanchen/viewerjs)是一个JavaScript写的图片查看器，可以在网页中查看图片。\n在博客根目录下运行：\n```\nnpm install viewerjs\n```\n安装成功后可以在npm安装路径下`\\node_modules`找到`viererjs`。\n\n## 2.导入viewerjs\n### （1）在主题模板中引入\n如果要在浏览器中使用viewerjs图片查看器，需要在页面上导入：\n```\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n<script src=\"/path/to/viewer.js\"></script>\n```\n但是使用hexo主题，自动生成静态网页，需要在主题模板中导入。我使用的[ocean主题](https://github.com/zhwangart/hexo-theme-ocean)在`head.ejs`的`<head></head>`中，加入：\n```\n  <!-- 引入图片查看器库类 -->\n  <%- css('css/viewer.min.css') %>\n  <%- js('/js/viewer.min.js') %>\n```\n\n### (2)复制css和js文件\n由于hexo主题资源下并没有这两个文件，需要从npm的安装目录(\\node_modules\\viewerjs\\dist)找到viewer.min.css，viewer.min.js这两个文件，分别复制到主题的js和css文件夹中。我使用的[ocean主题](https://github.com/zhwangart/hexo-theme-ocean)在\n```\n\\themes\\ocean\\source\\css\n\\themes\\ocean\\source\\js\n```\n这两个文件夹下。\n这样，在执行`hexo g`生成页面时，`<head></head>`部分会自动加上：\n```\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n<script src=\"/path/to/viewer.js\"></script>\n```\n### （3）在主题模板中写入js代码\n`.getElementsByClassName('class-name');`通过读取HTML标签，可以将所有ClassName为'class-name'的图片获取， [Dazo66's Blog](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)针对hexo博客写了一个完整的配置，我将他的代码引用贴在这里：\n```\n<!-- 图片查看器实例配置 -->\n<script type=\"text/javascript\">\n  //默认设置， 可以根据个人需求和喜好进行配置\n  //详细参考官方说明\n  Viewer.setDefaults({\n      //设置初始缩放 default: 1\n      zoomRatio : [0.5],\n      //设置滚轮缩放比率 default: 0.1\n      show: function () {\n        this.viewer.zoomTo(0.5);\n      },\n    });\n  //获得content中所有的图片， 不同主题可能有所不同\n  //为了和其他的图片区别开来 所以在markdown中插入图片的时候使用独特的记号\n  //为了一次性得到所有的图片我这里采用的是class = 'article-image'\n  var article = document.querySelector('.post-content');\n  var imageList = article.getElementsByClassName('article-image');\n  //将获取到的HTMLCollections转化成Array\n  var imageArray = new Array();\n  Array.prototype.forEach.call(imageList, element => {\n    imageArray.push(element);\n  });\n  //设置每个图片成为图片组\n  Array.prototype.forEach.call(imageList, element => {\n    var viewer1 = new Viewer(element);\n    viewer1.images = imageArray;\n    viewer1.length = imageArray.length;\n  });\n</script>\n```\n将这段代码放入`article.ejs`代码最后，这样在生成博客页面时，就自动加入到页面代码中了。\n在上面的配置中，会一次性将所有`class=artical-image`的图片读入列表，便于使用viewerjs查看器查看，在写博客时，只需在标签中指明`class=\"article-image\"`即可，比如我在插入本文第一张图时，Markdown应写为：\n```markdown\n{% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %}\n```\n\n---\n本文参考：\n- [Dazo66's Blog](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)\n- [viewerjs](https://github.com/fengyuanchen/viewerjs)","source":"_posts/给hexo博文页面加入图片查看器.md","raw":"---\ntitle: 给hexo博文页面加入图片查看器\ndate: 2020-02-27 23:32:04\ntags:\n- 博客\n- 总结\ncategories: \n- 博客总结\n---\n在hexo博客中，Markdown生成的界面无法对图片进行放大等操作，不便于阅读。通过引入viewerjs图片阅读器，可以实现点击图片进行放缩等功能。\n\n<!-- more -->\n今天在手机上看博客时，我发现博文中插入的脑图无法放大，根本看不清。使用电脑时可以直接放缩页面，但在因为适配了移动端，在手机上无法对页面放缩。\n如下图：\n{% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %}\n\n我在网上搜了一下解决办法，目前好像没有特别好用的插件，看到[为你的Hexo博客添加图片查看器](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)这篇博客，他使用了viewerjs插件，实现的功能正是我所需要的。于是晚上对自己使用的主题配置了一下，加入了viewerjs图片查看插件，点击页面上的图片，即可进行放缩等功能，见下图：\n{% asset_img article-image 移动端浏览器使用viewerjs图片查看器的效果.jpg 480 960 移动端浏览器使用viewerjs图片查看器的效果 %}\n\n## 1.安装viewerjs\n[viewerjs](https://github.com/fengyuanchen/viewerjs)是一个JavaScript写的图片查看器，可以在网页中查看图片。\n在博客根目录下运行：\n```\nnpm install viewerjs\n```\n安装成功后可以在npm安装路径下`\\node_modules`找到`viererjs`。\n\n## 2.导入viewerjs\n### （1）在主题模板中引入\n如果要在浏览器中使用viewerjs图片查看器，需要在页面上导入：\n```\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n<script src=\"/path/to/viewer.js\"></script>\n```\n但是使用hexo主题，自动生成静态网页，需要在主题模板中导入。我使用的[ocean主题](https://github.com/zhwangart/hexo-theme-ocean)在`head.ejs`的`<head></head>`中，加入：\n```\n  <!-- 引入图片查看器库类 -->\n  <%- css('css/viewer.min.css') %>\n  <%- js('/js/viewer.min.js') %>\n```\n\n### (2)复制css和js文件\n由于hexo主题资源下并没有这两个文件，需要从npm的安装目录(\\node_modules\\viewerjs\\dist)找到viewer.min.css，viewer.min.js这两个文件，分别复制到主题的js和css文件夹中。我使用的[ocean主题](https://github.com/zhwangart/hexo-theme-ocean)在\n```\n\\themes\\ocean\\source\\css\n\\themes\\ocean\\source\\js\n```\n这两个文件夹下。\n这样，在执行`hexo g`生成页面时，`<head></head>`部分会自动加上：\n```\n<link  href=\"/path/to/viewer.css\" rel=\"stylesheet\">\n<script src=\"/path/to/viewer.js\"></script>\n```\n### （3）在主题模板中写入js代码\n`.getElementsByClassName('class-name');`通过读取HTML标签，可以将所有ClassName为'class-name'的图片获取， [Dazo66's Blog](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)针对hexo博客写了一个完整的配置，我将他的代码引用贴在这里：\n```\n<!-- 图片查看器实例配置 -->\n<script type=\"text/javascript\">\n  //默认设置， 可以根据个人需求和喜好进行配置\n  //详细参考官方说明\n  Viewer.setDefaults({\n      //设置初始缩放 default: 1\n      zoomRatio : [0.5],\n      //设置滚轮缩放比率 default: 0.1\n      show: function () {\n        this.viewer.zoomTo(0.5);\n      },\n    });\n  //获得content中所有的图片， 不同主题可能有所不同\n  //为了和其他的图片区别开来 所以在markdown中插入图片的时候使用独特的记号\n  //为了一次性得到所有的图片我这里采用的是class = 'article-image'\n  var article = document.querySelector('.post-content');\n  var imageList = article.getElementsByClassName('article-image');\n  //将获取到的HTMLCollections转化成Array\n  var imageArray = new Array();\n  Array.prototype.forEach.call(imageList, element => {\n    imageArray.push(element);\n  });\n  //设置每个图片成为图片组\n  Array.prototype.forEach.call(imageList, element => {\n    var viewer1 = new Viewer(element);\n    viewer1.images = imageArray;\n    viewer1.length = imageArray.length;\n  });\n</script>\n```\n将这段代码放入`article.ejs`代码最后，这样在生成博客页面时，就自动加入到页面代码中了。\n在上面的配置中，会一次性将所有`class=artical-image`的图片读入列表，便于使用viewerjs查看器查看，在写博客时，只需在标签中指明`class=\"article-image\"`即可，比如我在插入本文第一张图时，Markdown应写为：\n```markdown\n{% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %}\n```\n\n---\n本文参考：\n- [Dazo66's Blog](https://blog.dazo66.com/2018/10/11/viewerjstutorial/)\n- [viewerjs](https://github.com/fengyuanchen/viewerjs)","slug":"给hexo博文页面加入图片查看器","published":1,"updated":"2020-02-27T17:15:50.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdswwbfz000790tohur618im","content":"<p>在hexo博客中，Markdown生成的界面无法对图片进行放大等操作，不便于阅读。通过引入viewerjs图片阅读器，可以实现点击图片进行放缩等功能。</p>\n<a id=\"more\"></a>\n<p>今天在手机上看博客时，我发现博文中插入的脑图无法放大，根本看不清。使用电脑时可以直接放缩页面，但在因为适配了移动端，在手机上无法对页面放缩。<br>如下图：</p>\n<img src=\"/2020/02/27/%E7%BB%99hexo%E5%8D%9A%E6%96%87%E9%A1%B5%E9%9D%A2%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/%E5%8E%9F%E7%94%9FMarkdown%E7%94%9F%E6%88%90%E7%9A%84%E7%95%8C%E9%9D%A2%E6%97%A0%E6%B3%95%E5%AF%B9%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C.jpg\" class=\"article-image\" width=\"480\" height=\"480\" title=\"原生Markdown生成的界面无法对图片操作\">\n\n<p>我在网上搜了一下解决办法，目前好像没有特别好用的插件，看到<a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">为你的Hexo博客添加图片查看器</a>这篇博客，他使用了viewerjs插件，实现的功能正是我所需要的。于是晚上对自己使用的主题配置了一下，加入了viewerjs图片查看插件，点击页面上的图片，即可进行放缩等功能，见下图：</p>\n<img src=\"/2020/02/27/%E7%BB%99hexo%E5%8D%9A%E6%96%87%E9%A1%B5%E9%9D%A2%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8viewerjs%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8%E7%9A%84%E6%95%88%E6%9E%9C.jpg\" class=\"article-image\" width=\"480\" height=\"960\" title=\"移动端浏览器使用viewerjs图片查看器的效果\">\n\n<h2 id=\"1-安装viewerjs\"><a href=\"#1-安装viewerjs\" class=\"headerlink\" title=\"1.安装viewerjs\"></a>1.安装viewerjs</h2><p><a href=\"https://github.com/fengyuanchen/viewerjs\" target=\"_blank\" rel=\"noopener\">viewerjs</a>是一个JavaScript写的图片查看器，可以在网页中查看图片。<br>在博客根目录下运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install viewerjs</span><br></pre></td></tr></table></figure>\n<p>安装成功后可以在npm安装路径下<code>\\node_modules</code>找到<code>viererjs</code>。</p>\n<h2 id=\"2-导入viewerjs\"><a href=\"#2-导入viewerjs\" class=\"headerlink\" title=\"2.导入viewerjs\"></a>2.导入viewerjs</h2><h3 id=\"（1）在主题模板中引入\"><a href=\"#（1）在主题模板中引入\" class=\"headerlink\" title=\"（1）在主题模板中引入\"></a>（1）在主题模板中引入</h3><p>如果要在浏览器中使用viewerjs图片查看器，需要在页面上导入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link  href&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>但是使用hexo主题，自动生成静态网页，需要在主题模板中导入。我使用的<a href=\"https://github.com/zhwangart/hexo-theme-ocean\" target=\"_blank\" rel=\"noopener\">ocean主题</a>在<code>head.ejs</code>的<code>&lt;head&gt;&lt;/head&gt;</code>中，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入图片查看器库类 --&gt;</span><br><span class=\"line\">&lt;%- css(&#39;css&#x2F;viewer.min.css&#39;) %&gt;</span><br><span class=\"line\">&lt;%- js(&#39;&#x2F;js&#x2F;viewer.min.js&#39;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-复制css和js文件\"><a href=\"#2-复制css和js文件\" class=\"headerlink\" title=\"(2)复制css和js文件\"></a>(2)复制css和js文件</h3><p>由于hexo主题资源下并没有这两个文件，需要从npm的安装目录(\\node_modules\\viewerjs\\dist)找到viewer.min.css，viewer.min.js这两个文件，分别复制到主题的js和css文件夹中。我使用的<a href=\"https://github.com/zhwangart/hexo-theme-ocean\" target=\"_blank\" rel=\"noopener\">ocean主题</a>在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\ocean\\source\\css</span><br><span class=\"line\">\\themes\\ocean\\source\\js</span><br></pre></td></tr></table></figure>\n<p>这两个文件夹下。<br>这样，在执行<code>hexo g</code>生成页面时，<code>&lt;head&gt;&lt;/head&gt;</code>部分会自动加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link  href&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（3）在主题模板中写入js代码\"><a href=\"#（3）在主题模板中写入js代码\" class=\"headerlink\" title=\"（3）在主题模板中写入js代码\"></a>（3）在主题模板中写入js代码</h3><p><code>.getElementsByClassName(&#39;class-name&#39;);</code>通过读取HTML标签，可以将所有ClassName为’class-name’的图片获取， <a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">Dazo66’s Blog</a>针对hexo博客写了一个完整的配置，我将他的代码引用贴在这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 图片查看器实例配置 --&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  &#x2F;&#x2F;默认设置， 可以根据个人需求和喜好进行配置</span><br><span class=\"line\">  &#x2F;&#x2F;详细参考官方说明</span><br><span class=\"line\">  Viewer.setDefaults(&#123;</span><br><span class=\"line\">      &#x2F;&#x2F;设置初始缩放 default: 1</span><br><span class=\"line\">      zoomRatio : [0.5],</span><br><span class=\"line\">      &#x2F;&#x2F;设置滚轮缩放比率 default: 0.1</span><br><span class=\"line\">      show: function () &#123;</span><br><span class=\"line\">        this.viewer.zoomTo(0.5);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#x2F;&#x2F;获得content中所有的图片， 不同主题可能有所不同</span><br><span class=\"line\">  &#x2F;&#x2F;为了和其他的图片区别开来 所以在markdown中插入图片的时候使用独特的记号</span><br><span class=\"line\">  &#x2F;&#x2F;为了一次性得到所有的图片我这里采用的是class &#x3D; &#39;article-image&#39;</span><br><span class=\"line\">  var article &#x3D; document.querySelector(&#39;.post-content&#39;);</span><br><span class=\"line\">  var imageList &#x3D; article.getElementsByClassName(&#39;article-image&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;将获取到的HTMLCollections转化成Array</span><br><span class=\"line\">  var imageArray &#x3D; new Array();</span><br><span class=\"line\">  Array.prototype.forEach.call(imageList, element &#x3D;&gt; &#123;</span><br><span class=\"line\">    imageArray.push(element);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  &#x2F;&#x2F;设置每个图片成为图片组</span><br><span class=\"line\">  Array.prototype.forEach.call(imageList, element &#x3D;&gt; &#123;</span><br><span class=\"line\">    var viewer1 &#x3D; new Viewer(element);</span><br><span class=\"line\">    viewer1.images &#x3D; imageArray;</span><br><span class=\"line\">    viewer1.length &#x3D; imageArray.length;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>将这段代码放入<code>article.ejs</code>代码最后，这样在生成博客页面时，就自动加入到页面代码中了。<br>在上面的配置中，会一次性将所有<code>class=artical-image</code>的图片读入列表，便于使用viewerjs查看器查看，在写博客时，只需在标签中指明<code>class=&quot;article-image&quot;</code>即可，比如我在插入本文第一张图时，Markdown应写为：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>本文参考：</p>\n<ul>\n<li><a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">Dazo66’s Blog</a></li>\n<li><a href=\"https://github.com/fengyuanchen/viewerjs\" target=\"_blank\" rel=\"noopener\">viewerjs</a></li>\n</ul>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>在hexo博客中，Markdown生成的界面无法对图片进行放大等操作，不便于阅读。通过引入viewerjs图片阅读器，可以实现点击图片进行放缩等功能。</p>","more":"<p>今天在手机上看博客时，我发现博文中插入的脑图无法放大，根本看不清。使用电脑时可以直接放缩页面，但在因为适配了移动端，在手机上无法对页面放缩。<br>如下图：</p>\n<img src=\"/2020/02/27/%E7%BB%99hexo%E5%8D%9A%E6%96%87%E9%A1%B5%E9%9D%A2%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/%E5%8E%9F%E7%94%9FMarkdown%E7%94%9F%E6%88%90%E7%9A%84%E7%95%8C%E9%9D%A2%E6%97%A0%E6%B3%95%E5%AF%B9%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C.jpg\" class=\"article-image\" width=\"480\" height=\"480\" title=\"原生Markdown生成的界面无法对图片操作\">\n\n<p>我在网上搜了一下解决办法，目前好像没有特别好用的插件，看到<a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">为你的Hexo博客添加图片查看器</a>这篇博客，他使用了viewerjs插件，实现的功能正是我所需要的。于是晚上对自己使用的主题配置了一下，加入了viewerjs图片查看插件，点击页面上的图片，即可进行放缩等功能，见下图：</p>\n<img src=\"/2020/02/27/%E7%BB%99hexo%E5%8D%9A%E6%96%87%E9%A1%B5%E9%9D%A2%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BD%BF%E7%94%A8viewerjs%E5%9B%BE%E7%89%87%E6%9F%A5%E7%9C%8B%E5%99%A8%E7%9A%84%E6%95%88%E6%9E%9C.jpg\" class=\"article-image\" width=\"480\" height=\"960\" title=\"移动端浏览器使用viewerjs图片查看器的效果\">\n\n<h2 id=\"1-安装viewerjs\"><a href=\"#1-安装viewerjs\" class=\"headerlink\" title=\"1.安装viewerjs\"></a>1.安装viewerjs</h2><p><a href=\"https://github.com/fengyuanchen/viewerjs\" target=\"_blank\" rel=\"noopener\">viewerjs</a>是一个JavaScript写的图片查看器，可以在网页中查看图片。<br>在博客根目录下运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install viewerjs</span><br></pre></td></tr></table></figure>\n<p>安装成功后可以在npm安装路径下<code>\\node_modules</code>找到<code>viererjs</code>。</p>\n<h2 id=\"2-导入viewerjs\"><a href=\"#2-导入viewerjs\" class=\"headerlink\" title=\"2.导入viewerjs\"></a>2.导入viewerjs</h2><h3 id=\"（1）在主题模板中引入\"><a href=\"#（1）在主题模板中引入\" class=\"headerlink\" title=\"（1）在主题模板中引入\"></a>（1）在主题模板中引入</h3><p>如果要在浏览器中使用viewerjs图片查看器，需要在页面上导入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link  href&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>但是使用hexo主题，自动生成静态网页，需要在主题模板中导入。我使用的<a href=\"https://github.com/zhwangart/hexo-theme-ocean\" target=\"_blank\" rel=\"noopener\">ocean主题</a>在<code>head.ejs</code>的<code>&lt;head&gt;&lt;/head&gt;</code>中，加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 引入图片查看器库类 --&gt;</span><br><span class=\"line\">&lt;%- css(&#39;css&#x2F;viewer.min.css&#39;) %&gt;</span><br><span class=\"line\">&lt;%- js(&#39;&#x2F;js&#x2F;viewer.min.js&#39;) %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-复制css和js文件\"><a href=\"#2-复制css和js文件\" class=\"headerlink\" title=\"(2)复制css和js文件\"></a>(2)复制css和js文件</h3><p>由于hexo主题资源下并没有这两个文件，需要从npm的安装目录(\\node_modules\\viewerjs\\dist)找到viewer.min.css，viewer.min.js这两个文件，分别复制到主题的js和css文件夹中。我使用的<a href=\"https://github.com/zhwangart/hexo-theme-ocean\" target=\"_blank\" rel=\"noopener\">ocean主题</a>在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\themes\\ocean\\source\\css</span><br><span class=\"line\">\\themes\\ocean\\source\\js</span><br></pre></td></tr></table></figure>\n<p>这两个文件夹下。<br>这样，在执行<code>hexo g</code>生成页面时，<code>&lt;head&gt;&lt;/head&gt;</code>部分会自动加上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link  href&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class=\"line\">&lt;script src&#x3D;&quot;&#x2F;path&#x2F;to&#x2F;viewer.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"（3）在主题模板中写入js代码\"><a href=\"#（3）在主题模板中写入js代码\" class=\"headerlink\" title=\"（3）在主题模板中写入js代码\"></a>（3）在主题模板中写入js代码</h3><p><code>.getElementsByClassName(&#39;class-name&#39;);</code>通过读取HTML标签，可以将所有ClassName为’class-name’的图片获取， <a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">Dazo66’s Blog</a>针对hexo博客写了一个完整的配置，我将他的代码引用贴在这里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 图片查看器实例配置 --&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">  &#x2F;&#x2F;默认设置， 可以根据个人需求和喜好进行配置</span><br><span class=\"line\">  &#x2F;&#x2F;详细参考官方说明</span><br><span class=\"line\">  Viewer.setDefaults(&#123;</span><br><span class=\"line\">      &#x2F;&#x2F;设置初始缩放 default: 1</span><br><span class=\"line\">      zoomRatio : [0.5],</span><br><span class=\"line\">      &#x2F;&#x2F;设置滚轮缩放比率 default: 0.1</span><br><span class=\"line\">      show: function () &#123;</span><br><span class=\"line\">        this.viewer.zoomTo(0.5);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#x2F;&#x2F;获得content中所有的图片， 不同主题可能有所不同</span><br><span class=\"line\">  &#x2F;&#x2F;为了和其他的图片区别开来 所以在markdown中插入图片的时候使用独特的记号</span><br><span class=\"line\">  &#x2F;&#x2F;为了一次性得到所有的图片我这里采用的是class &#x3D; &#39;article-image&#39;</span><br><span class=\"line\">  var article &#x3D; document.querySelector(&#39;.post-content&#39;);</span><br><span class=\"line\">  var imageList &#x3D; article.getElementsByClassName(&#39;article-image&#39;);</span><br><span class=\"line\">  &#x2F;&#x2F;将获取到的HTMLCollections转化成Array</span><br><span class=\"line\">  var imageArray &#x3D; new Array();</span><br><span class=\"line\">  Array.prototype.forEach.call(imageList, element &#x3D;&gt; &#123;</span><br><span class=\"line\">    imageArray.push(element);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  &#x2F;&#x2F;设置每个图片成为图片组</span><br><span class=\"line\">  Array.prototype.forEach.call(imageList, element &#x3D;&gt; &#123;</span><br><span class=\"line\">    var viewer1 &#x3D; new Viewer(element);</span><br><span class=\"line\">    viewer1.images &#x3D; imageArray;</span><br><span class=\"line\">    viewer1.length &#x3D; imageArray.length;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>将这段代码放入<code>article.ejs</code>代码最后，这样在生成博客页面时，就自动加入到页面代码中了。<br>在上面的配置中，会一次性将所有<code>class=artical-image</code>的图片读入列表，便于使用viewerjs查看器查看，在写博客时，只需在标签中指明<code>class=&quot;article-image&quot;</code>即可，比如我在插入本文第一张图时，Markdown应写为：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img article-image 原生Markdown生成的界面无法对图片操作.jpg 480 480 原生Markdown生成的界面无法对图片操作 %&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>本文参考：</p>\n<ul>\n<li><a href=\"https://blog.dazo66.com/2018/10/11/viewerjstutorial/\" target=\"_blank\" rel=\"noopener\">Dazo66’s Blog</a></li>\n<li><a href=\"https://github.com/fengyuanchen/viewerjs\" target=\"_blank\" rel=\"noopener\">viewerjs</a></li>\n</ul>"},{"title":"用HTML5和原生JS写一个进度条","date":"2020-08-13T13:47:39.000Z","_content":"\nHTML5 对 web 表单有不少更新，比如为[`<input>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)新增了<code>range</code>、<code>date</code>等`type`属性值。利用<code>range</code>这个`type`可以很简单地完成一个进度条组件，比用 CSS 写要简洁很多。\n\n<!-- more -->\n\n主要思路：\n\n1.  `<input type=\"range\" id=\"progress\"/>`元素是进度条主体，通过`value`值控制进度，只要改变`value`即可实现对进度条的控制。\n2.  `<input type=\"number\" id=\"value\"/>`元素获取进度条的`value`来显示具体的进度条值。通过互相监听`input`元素的`\"change\"`事件实现与进度条主体的数据绑定。\n3.  给左右两侧的加减号监听鼠标`click`事件，使进度条和百分比值随之更新。\n4.  给进度条增加`\"mousemove\"`事件监听赋值给`<input type=\"number\"/>`元素，使拖动过程中保持数值的改变。\n\n实现效果如下：\n\n<pre>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n\n  </style>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; //注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 输入为空\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n\n  </script>\n</body>\n</pre>\n\n完整代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>进度条</title>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    // 获取DOM元素\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    // 监听\"-\"上的鼠标点击事件\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; // 注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 监听拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    // 监听数值框输入\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 当输入为空的情况\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n  </script>\n</body>\n\n</html>\n```\n","source":"_posts/用HTML5和原生JS写一个进度条.md","raw":"---\ntitle: 用HTML5和原生JS写一个进度条\ndate: 2020-08-13 21:47:39\ntags:\ncategories:\n---\n\nHTML5 对 web 表单有不少更新，比如为[`<input>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)新增了<code>range</code>、<code>date</code>等`type`属性值。利用<code>range</code>这个`type`可以很简单地完成一个进度条组件，比用 CSS 写要简洁很多。\n\n<!-- more -->\n\n主要思路：\n\n1.  `<input type=\"range\" id=\"progress\"/>`元素是进度条主体，通过`value`值控制进度，只要改变`value`即可实现对进度条的控制。\n2.  `<input type=\"number\" id=\"value\"/>`元素获取进度条的`value`来显示具体的进度条值。通过互相监听`input`元素的`\"change\"`事件实现与进度条主体的数据绑定。\n3.  给左右两侧的加减号监听鼠标`click`事件，使进度条和百分比值随之更新。\n4.  给进度条增加`\"mousemove\"`事件监听赋值给`<input type=\"number\"/>`元素，使拖动过程中保持数值的改变。\n\n实现效果如下：\n\n<pre>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n\n  </style>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; //注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 输入为空\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n\n  </script>\n</body>\n</pre>\n\n完整代码如下：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>进度条</title>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n  </style>\n</head>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    // 获取DOM元素\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    // 监听\"-\"上的鼠标点击事件\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; // 注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 监听拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    // 监听数值框输入\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 当输入为空的情况\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n  </script>\n</body>\n\n</html>\n```\n","slug":"用HTML5和原生JS写一个进度条","published":1,"updated":"2020-08-13T14:21:08.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdswwbg0000890tof2mq2daq","content":"<p>HTML5 对 web 表单有不少更新，比如为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a>新增了<code>range</code>、<code>date</code>等<code>type</code>属性值。利用<code>range</code>这个<code>type</code>可以很简单地完成一个进度条组件，比用 CSS 写要简洁很多。</p>\n<a id=\"more\"></a>\n\n<p>主要思路：</p>\n<ol>\n<li><code>&lt;input type=&quot;range&quot; id=&quot;progress&quot;/&gt;</code>元素是进度条主体，通过<code>value</code>值控制进度，只要改变<code>value</code>即可实现对进度条的控制。</li>\n<li><code>&lt;input type=&quot;number&quot; id=&quot;value&quot;/&gt;</code>元素获取进度条的<code>value</code>来显示具体的进度条值。通过互相监听<code>input</code>元素的<code>&quot;change&quot;</code>事件实现与进度条主体的数据绑定。</li>\n<li>给左右两侧的加减号监听鼠标<code>click</code>事件，使进度条和百分比值随之更新。</li>\n<li>给进度条增加<code>&quot;mousemove&quot;</code>事件监听赋值给<code>&lt;input type=&quot;number&quot;/&gt;</code>元素，使拖动过程中保持数值的改变。</li>\n</ol>\n<p>实现效果如下：</p>\n<pre>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n\n  </style>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; //注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 输入为空\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n\n  </script>\n</body>\n</pre>\n\n<p>完整代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>进度条<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#canvas</span> &#123;</span></span><br><span class=\"line\">      width: 400px;</span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\">      margin: 10% auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#progress-bar</span> &#123;</span></span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">      align-items: center;</span><br><span class=\"line\">      justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span> &#123;</span></span><br><span class=\"line\">      border: none;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span>: 2<span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span><span class=\"selector-pseudo\">::-webkit-outer-spin-button</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span><span class=\"selector-pseudo\">::-webkit-inner-spin-button</span> &#123;</span></span><br><span class=\"line\">      -webkit-appearance: none !important;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"minus\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1024 1024\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"14\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">d</span>=<span class=\"string\">\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"progress\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"0.1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50.0\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"plus\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1024 1024\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"14\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">d</span>=<span class=\"string\">\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"0.1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50.0\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 获取DOM元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> progress = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"progress\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> minus = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"minus\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> plus = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"plus\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> value = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"value\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听\"-\"上的鼠标点击事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    minus.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      progress.value = <span class=\"built_in\">Number</span>(progress.value) - <span class=\"number\">10</span>;</span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    plus.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      progress.value = <span class=\"built_in\">Number</span>(progress.value) + <span class=\"number\">10</span>; <span class=\"comment\">// 注意有坑！value的值是string类型</span></span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听拖动进度条</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    progress.addEventListener(<span class=\"string\">\"mousemove\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      value.value = <span class=\"built_in\">Number</span>(progress.value);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听进度条改变</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    progress.addEventListener(<span class=\"string\">\"change\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听数值框输入</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    value.addEventListener(<span class=\"string\">\"change\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">if</span> (!value.value) &#123;<span class=\"comment\">// 当输入为空的情况</span></span></span><br><span class=\"line\">        value.value = 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>(value.value) &gt;= <span class=\"number\">100</span>) &#123;<span class=\"comment\">// 输入大于100</span></span></span><br><span class=\"line\">        value.value = 100</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"javascript\">      value.value = <span class=\"built_in\">Number</span>(value.value)</span></span><br><span class=\"line\">      progress.value = value.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css\">","site":{"data":{}},"excerpt":"<p>HTML5 对 web 表单有不少更新，比如为<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\" target=\"_blank\" rel=\"noopener\"><code>&lt;input&gt;</code></a>新增了<code>range</code>、<code>date</code>等<code>type</code>属性值。利用<code>range</code>这个<code>type</code>可以很简单地完成一个进度条组件，比用 CSS 写要简洁很多。</p>","more":"<p>主要思路：</p>\n<ol>\n<li><code>&lt;input type=&quot;range&quot; id=&quot;progress&quot;/&gt;</code>元素是进度条主体，通过<code>value</code>值控制进度，只要改变<code>value</code>即可实现对进度条的控制。</li>\n<li><code>&lt;input type=&quot;number&quot; id=&quot;value&quot;/&gt;</code>元素获取进度条的<code>value</code>来显示具体的进度条值。通过互相监听<code>input</code>元素的<code>&quot;change&quot;</code>事件实现与进度条主体的数据绑定。</li>\n<li>给左右两侧的加减号监听鼠标<code>click</code>事件，使进度条和百分比值随之更新。</li>\n<li>给进度条增加<code>&quot;mousemove&quot;</code>事件监听赋值给<code>&lt;input type=&quot;number&quot;/&gt;</code>元素，使拖动过程中保持数值的改变。</li>\n</ol>\n<p>实现效果如下：</p>\n<pre>\n  <style>\n    #canvas {\n      width: 400px;\n      height: 200px;\n      margin: 10% auto;\n    }\n\n    #progress-bar {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    #value {\n      border: none;\n      width: 2.2em;\n    }\n\n    #value::-webkit-outer-spin-button,\n    #value::-webkit-inner-spin-button {\n      -webkit-appearance: none !important;\n    }\n\n  </style>\n\n<body>\n  <div id=\"canvas\">\n    <div id=\"progress-bar\">\n      <svg id=\"minus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\" />\n      <svg id=\"plus\" viewBox=\"0 0 1024 1024\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\">\n        <path\n          d=\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\">\n        </path>\n      </svg>\n      <input type=\"number\" id=\"value\" min=\"0\" max=\"100\" step=\"0.1\" value=\"50.0\">%</div>\n  </div>\n  </div>\n  <script>\n    const progress = document.getElementById(\"progress\");\n    const minus = document.getElementById(\"minus\");\n    const plus = document.getElementById(\"plus\");\n    const value = document.getElementById(\"value\");\n\n    minus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) - 10;\n      value.value = progress.value;\n    });\n    plus.addEventListener(\"click\", () => {\n      progress.value = Number(progress.value) + 10; //注意有坑！value的值是string类型\n      value.value = progress.value;\n    });\n    // 拖动进度条\n    progress.addEventListener(\"mousemove\", () => {\n      value.value = Number(progress.value);\n    });\n    // 监听进度条改变\n    progress.addEventListener(\"change\", () => {\n      value.value = progress.value;\n    });\n    value.addEventListener(\"change\", () => {\n      if (!value.value) {// 输入为空\n        value.value = 0;\n      }\n      if (Number(value.value) >= 100) {// 输入大于100\n        value.value = 100\n      }\n      value.value = Number(value.value)\n      progress.value = value.value;\n    });\n\n  </script>\n</body>\n</pre>\n\n<p>完整代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>进度条<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#canvas</span> &#123;</span></span><br><span class=\"line\">      width: 400px;</span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\">      margin: 10% auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#progress-bar</span> &#123;</span></span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">      align-items: center;</span><br><span class=\"line\">      justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span> &#123;</span></span><br><span class=\"line\">      border: none;</span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">width</span>: 2<span class=\"selector-class\">.2em</span>;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span><span class=\"selector-pseudo\">::-webkit-outer-spin-button</span>,</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-id\">#value</span><span class=\"selector-pseudo\">::-webkit-inner-spin-button</span> &#123;</span></span><br><span class=\"line\">      -webkit-appearance: none !important;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"canvas\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"progress-bar\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"minus\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1024 1024\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"14\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">d</span>=<span class=\"string\">\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-694.848 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l694.848 0q22.848 0 38.848 16t16 38.848z\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"range\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"progress\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"0.1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50.0\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"plus\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 1024 1024\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/2000/svg\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"14\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"14\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">path</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">d</span>=<span class=\"string\">\"M911.232 420.565333l0 109.717333q0 22.848-16 38.848t-38.848 16l-237.717333 0 0 237.717333q0 22.848-16 38.848t-38.848 16l-109.717333 0q-22.848 0-38.848-16t-16-38.848l0-237.717333-237.717333 0q-22.848 0-38.848-16t-16-38.848l0-109.717333q0-22.848 16-38.848t38.848-16l237.717333 0 0-237.717333q0-22.848 16-38.848t38.848-16l109.717333 0q22.848 0 38.848 16t16 38.848l0 237.717333 237.717333 0q22.848 0 38.848 16t16 38.848z\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"number\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">min</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">max</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">step</span>=<span class=\"string\">\"0.1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50.0\"</span>&gt;</span>%<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 获取DOM元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> progress = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"progress\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> minus = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"minus\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> plus = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"plus\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> value = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"value\"</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听\"-\"上的鼠标点击事件</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    minus.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      progress.value = <span class=\"built_in\">Number</span>(progress.value) - <span class=\"number\">10</span>;</span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    plus.addEventListener(<span class=\"string\">\"click\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      progress.value = <span class=\"built_in\">Number</span>(progress.value) + <span class=\"number\">10</span>; <span class=\"comment\">// 注意有坑！value的值是string类型</span></span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听拖动进度条</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    progress.addEventListener(<span class=\"string\">\"mousemove\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      value.value = <span class=\"built_in\">Number</span>(progress.value);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听进度条改变</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    progress.addEventListener(<span class=\"string\">\"change\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\">      value.value = progress.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"comment\">// 监听数值框输入</span></span></span><br><span class=\"line\"><span class=\"actionscript\">    value.addEventListener(<span class=\"string\">\"change\"</span>, () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">if</span> (!value.value) &#123;<span class=\"comment\">// 当输入为空的情况</span></span></span><br><span class=\"line\">        value.value = 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Number</span>(value.value) &gt;= <span class=\"number\">100</span>) &#123;<span class=\"comment\">// 输入大于100</span></span></span><br><span class=\"line\">        value.value = 100</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"javascript\">      value.value = <span class=\"built_in\">Number</span>(value.value)</span></span><br><span class=\"line\">      progress.value = value.value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/不在学校如何使用Zotero和知网/成功识别.png","slug":"成功识别.png","post":"ckdswwbfp000290todchq3ebs","modified":1,"renderable":0},{"_id":"source/_posts/前端基础（一）/flex布局.svg","post":"ckdswwbfy000690togbu60igi","slug":"flex布局.svg","modified":1,"renderable":1},{"_id":"source/_posts/给hexo博文页面加入图片查看器/原生Markdown生成的界面无法对图片操作.jpg","post":"ckdswwbfz000790tohur618im","slug":"原生Markdown生成的界面无法对图片操作.jpg","modified":1,"renderable":1},{"_id":"source/_posts/给hexo博文页面加入图片查看器/移动端浏览器使用viewerjs图片查看器的效果.jpg","slug":"移动端浏览器使用viewerjs图片查看器的效果.jpg","post":"ckdswwbfz000790tohur618im","modified":1,"renderable":0},{"_id":"source/_posts/不在学校如何使用Zotero和知网/zotero代理设置.png","post":"ckdswwbfp000290todchq3ebs","slug":"zotero代理设置.png","modified":1,"renderable":1},{"_id":"source/_posts/不在学校如何使用Zotero和知网/代理设置.png","post":"ckdswwbfp000290todchq3ebs","slug":"代理设置.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo博客搭建总结/giteepages服务.png","post":"ckdswwbfi000090to7izj2ko4","slug":"giteepages服务.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo博客搭建总结/gitee权限成功.jpg","slug":"gitee权限成功.jpg","post":"ckdswwbfi000090to7izj2ko4","modified":1,"renderable":0},{"_id":"source/_posts/Hexo博客搭建总结/gitee权限报错.png","post":"ckdswwbfi000090to7izj2ko4","slug":"gitee权限报错.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo博客搭建总结/hexosync分支缺失的文件.png","post":"ckdswwbfi000090to7izj2ko4","slug":"hexosync分支缺失的文件.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo博客搭建总结/复制文件.png","post":"ckdswwbfi000090to7izj2ko4","slug":"复制文件.png","modified":1,"renderable":1},{"_id":"source/_posts/Hexo博客搭建总结/管理凭据.png","post":"ckdswwbfi000090to7izj2ko4","slug":"管理凭据.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckdswwbfz000790tohur618im","category_id":"ckdswwbfr000490tohrjb96x4","_id":"ckdswwbg4000b90tof7dg0rs7"},{"post_id":"ckdswwbfi000090to7izj2ko4","category_id":"ckdswwbfr000490tohrjb96x4","_id":"ckdswwbg5000d90to27jccyj0"},{"post_id":"ckdswwbfp000290todchq3ebs","category_id":"ckdswwbg1000990to4fmicfor","_id":"ckdswwbg5000g90tohkuqblyt"}],"PostTag":[{"post_id":"ckdswwbfi000090to7izj2ko4","tag_id":"ckdswwbfx000590toaass3uma","_id":"ckdswwbg5000e90toflnu4rsq"},{"post_id":"ckdswwbfi000090to7izj2ko4","tag_id":"ckdswwbg2000a90tohiq5gdkj","_id":"ckdswwbg5000f90to5i3q0h8h"},{"post_id":"ckdswwbfp000290todchq3ebs","tag_id":"ckdswwbg4000c90toasjxa7xc","_id":"ckdswwbg6000i90togdpk04d2"},{"post_id":"ckdswwbfy000690togbu60igi","tag_id":"ckdswwbg5000h90tohf8ohzsk","_id":"ckdswwbg7000k90tog3hvf7ba"},{"post_id":"ckdswwbfz000790tohur618im","tag_id":"ckdswwbfx000590toaass3uma","_id":"ckdswwbg8000l90to427t8pok"},{"post_id":"ckdswwbfz000790tohur618im","tag_id":"ckdswwbg2000a90tohiq5gdkj","_id":"ckdswwbg8000m90todli936ef"}],"Tag":[{"name":"博客","_id":"ckdswwbfx000590toaass3uma"},{"name":"总结","_id":"ckdswwbg2000a90tohiq5gdkj"},{"name":"Zotero","_id":"ckdswwbg4000c90toasjxa7xc"},{"name":"前端","_id":"ckdswwbg5000h90tohf8ohzsk"}]}}